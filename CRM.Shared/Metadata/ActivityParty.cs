//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using DG.XrmContext;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;




/// <summary>
/// <para>Personne ou groupe associé à une activité. Une activité peut comporter plusieurs groupes d'activité.</para>
/// <para>Display Name: Groupe d’activité</para>
/// </summary>
[EntityLogicalName("activityparty")]
[DebuggerDisplay("{DebuggerDisplay,nq}")]
[DataContract()]
public partial class ActivityParty : ExtendedEntity<EmptyEnum, EmptyEnum> {
    
    public const string EntityLogicalName = "activityparty";
    
    public const int EntityTypeCode = 135;
    
    public ActivityParty() : 
            base(EntityLogicalName) {
    }
    
    public ActivityParty(Guid Id) : 
            base(EntityLogicalName, Id) {
    }
    
    private string DebuggerDisplay {
        get {
            return GetDebuggerDisplay("partyidname");
        }
    }
    
    [AttributeLogicalName("activitypartyid")]
    public override Guid Id {
        get {
            return base.Id;
        }
        set {
            SetId("activitypartyid", value);
        }
    }
    
    /// <summary>
    /// <para>Identificateur unique du groupe d'activité.</para>
    /// <para>Display Name: Groupe d’activité</para>
    /// </summary>
    [AttributeLogicalName("activitypartyid")]
    [DisplayName("Groupe d’activité")]
    public Guid? ActivityPartyId {
        get {
            return GetAttributeValue<Guid?>("activitypartyid");
        }
        set {
            SetId("activitypartyid", value);
        }
    }
    
    /// <summary>
    /// <para>Identificateur unique de l'activité associée au groupe d'activité. (Un « groupe » signifie toute personne associée à une activité).</para>
    /// <para>Display Name: Activité</para>
    /// </summary>
    [AttributeLogicalName("activityid")]
    [DisplayName("Activité")]
    public EntityReference ActivityId {
        get {
            return GetAttributeValue<EntityReference>("activityid");
        }
        set {
            SetAttributeValue("activityid", value);
        }
    }
    
    /// <summary>
    /// <para>Adresse e-mail de remise d’un courrier électronique qui est associée à l’entité cible.</para>
    /// <para>Display Name: Adresse </para>
    /// </summary>
    [AttributeLogicalName("addressused")]
    [DisplayName("Adresse ")]
    [MaxLength(320)]
    public string AddressUsed {
        get {
            return GetAttributeValue<string>("addressused");
        }
        set {
            SetAttributeValue("addressused", value);
        }
    }
    
    /// <summary>
    /// <para>Numéro de colonne d'adresse de messagerie de la partie associée.</para>
    /// <para>Display Name: Numéro de colonne de message électronique de la partie</para>
    /// </summary>
    [AttributeLogicalName("addressusedemailcolumnnumber")]
    [DisplayName("Numéro de colonne de message électronique de la partie")]
    [Range(1, 2147483647)]
    public int? AddressUsedEmailColumnNumber {
        get {
            return GetAttributeValue<int?>("addressusedemailcolumnnumber");
        }
    }
    
    /// <summary>
    /// <para>Information indiquant s'il l'envoi de courrier électronique au groupe d'activité est autorisé.</para>
    /// <para>Display Name: Ne pas autoriser le courrier électronique</para>
    /// </summary>
    [AttributeLogicalName("donotemail")]
    [DisplayName("Ne pas autoriser le courrier électronique")]
    public bool? DoNotEmail {
        get {
            return GetAttributeValue<bool?>("donotemail");
        }
    }
    
    /// <summary>
    /// <para>Information indiquant si l'envoi de télécopies au groupe d'activité est autorisé.</para>
    /// <para>Display Name: Ne pas autoriser la télécopie</para>
    /// </summary>
    [AttributeLogicalName("donotfax")]
    [DisplayName("Ne pas autoriser la télécopie")]
    public bool? DoNotFax {
        get {
            return GetAttributeValue<bool?>("donotfax");
        }
    }
    
    /// <summary>
    /// <para>Information indiquant si l'émission d'appels téléphoniques au prospect est autorisée.</para>
    /// <para>Display Name: Ne pas autoriser les appels téléphoniques</para>
    /// </summary>
    [AttributeLogicalName("donotphone")]
    [DisplayName("Ne pas autoriser les appels téléphoniques")]
    public bool? DoNotPhone {
        get {
            return GetAttributeValue<bool?>("donotphone");
        }
    }
    
    /// <summary>
    /// <para>Information indiquant si l'envoi de courrier postal au prospect est autorisé.</para>
    /// <para>Display Name: Ne pas autoriser le courrier postal</para>
    /// </summary>
    [AttributeLogicalName("donotpostalmail")]
    [DisplayName("Ne pas autoriser le courrier postal")]
    public bool? DoNotPostalMail {
        get {
            return GetAttributeValue<bool?>("donotpostalmail");
        }
    }
    
    /// <summary>
    /// <para>Quantité d'effort utilisée par la ressource dans une activité de rendez-vous de service.</para>
    /// <para>Display Name: Effort</para>
    /// </summary>
    [AttributeLogicalName("effort")]
    [DisplayName("Effort")]
    public double? Effort {
        get {
            return GetAttributeValue<double?>("effort");
        }
        set {
            SetAttributeValue("effort", value);
        }
    }
    
    /// <summary>
    /// <para>Utilisation interne uniquement.</para>
    /// <para>Display Name: Entrée Exchange</para>
    /// </summary>
    [AttributeLogicalName("exchangeentryid")]
    [DisplayName("Entrée Exchange")]
    [MaxLength(1024)]
    public string ExchangeEntryId {
        get {
            return GetAttributeValue<string>("exchangeentryid");
        }
        set {
            SetAttributeValue("exchangeentryid", value);
        }
    }
    
    /// <summary>
    /// <para>The external id used when the party does not have an email address.</para>
    /// <para>Display Name: External Id</para>
    /// </summary>
    [AttributeLogicalName("externalid")]
    [DisplayName("External Id")]
    [MaxLength(200)]
    public string ExternalId {
        get {
            return GetAttributeValue<string>("externalid");
        }
        set {
            SetAttributeValue("externalid", value);
        }
    }
    
    /// <summary>
    /// <para>The external id type used when the party does not have an email address.</para>
    /// <para>Display Name: External Id Type</para>
    /// </summary>
    [AttributeLogicalName("externalidtype")]
    [DisplayName("External Id Type")]
    [MaxLength(200)]
    public string ExternalIdType {
        get {
            return GetAttributeValue<string>("externalidtype");
        }
        set {
            SetAttributeValue("externalidtype", value);
        }
    }
    
    /// <summary>
    /// <para>Type d’instance d’une série périodique.</para>
    /// <para>Display Name: Type de rendez-vous</para>
    /// </summary>
    [AttributeLogicalName("instancetypecode")]
    [DisplayName("Type de rendez-vous")]
    public ActivityParty_InstanceTypeCode? InstanceTypeCode {
        get {
            return GetOptionSetValue<ActivityParty_InstanceTypeCode>("instancetypecode");
        }
    }
    
    /// <summary>
    /// <para>Information indiquant si l’enregistrement d’entité sous-jacent est supprimé.</para>
    /// <para>Display Name: Est supprimé par le groupe</para>
    /// </summary>
    [AttributeLogicalName("ispartydeleted")]
    [DisplayName("Est supprimé par le groupe")]
    public bool? IsPartyDeleted {
        get {
            return GetAttributeValue<bool?>("ispartydeleted");
        }
    }
    
    /// <summary>
    /// <para>Identificateur unique de l’utilisateur ou de l’équipe propriétaire du groupe d’activité.</para>
    /// <para>Display Name: Propriétaire</para>
    /// </summary>
    [AttributeLogicalName("ownerid")]
    [DisplayName("Propriétaire")]
    public EntityReference OwnerId {
        get {
            return GetAttributeValue<EntityReference>("ownerid");
        }
    }
    
    /// <summary>
    /// <para>Rôle de la personne dans l’activité, tel que Expéditeur, À, Cc, Cci, Nécessaire, Facultatif, Organisateur, Concernant ou Propriétaire.</para>
    /// <para>Display Name: Type de participation</para>
    /// </summary>
    [AttributeLogicalName("participationtypemask")]
    [DisplayName("Type de participation")]
    public ActivityParty_ParticipationTypeMask? ParticipationTypeMask {
        get {
            return GetOptionSetValue<ActivityParty_ParticipationTypeMask>("participationtypemask");
        }
        set {
            SetOptionSetValue("participationtypemask", value);
        }
    }
    
    /// <summary>
    /// <para>Identificateur unique du groupe associé à l'activité.</para>
    /// <para>Display Name: Groupe</para>
    /// </summary>
    [AttributeLogicalName("partyid")]
    [DisplayName("Groupe")]
    public EntityReference PartyId {
        get {
            return GetAttributeValue<EntityReference>("partyid");
        }
        set {
            SetAttributeValue("partyid", value);
        }
    }
    
    /// <summary>
    /// <para>Identificateur unique de la spécification de ressources pour le groupe d'activité.</para>
    /// <para>Display Name: Spécification de ressources</para>
    /// </summary>
    [AttributeLogicalName("resourcespecid")]
    [DisplayName("Spécification de ressources")]
    public EntityReference ResourceSpecId {
        get {
            return GetAttributeValue<EntityReference>("resourcespecid");
        }
        set {
            SetAttributeValue("resourcespecid", value);
        }
    }
    
    /// <summary>
    /// <para>Heure de fin planifiée de l'activité.</para>
    /// <para>Display Name: Fin planifiée</para>
    /// </summary>
    [AttributeLogicalName("scheduledend")]
    [DisplayName("Fin planifiée")]
    public DateTime? ScheduledEnd {
        get {
            return GetAttributeValue<DateTime?>("scheduledend");
        }
    }
    
    /// <summary>
    /// <para>Heure de début planifiée de l'activité.</para>
    /// <para>Display Name: Début planifié</para>
    /// </summary>
    [AttributeLogicalName("scheduledstart")]
    [DisplayName("Début planifié")]
    public DateTime? ScheduledStart {
        get {
            return GetAttributeValue<DateTime?>("scheduledstart");
        }
    }
    
    /// <summary>
    /// <para>Nom de la partie à utiliser lorsque la partie n’est pas résolue pour une entité.</para>
    /// <para>Display Name: Nom de la partie non résolue</para>
    /// </summary>
    [AttributeLogicalName("unresolvedpartyname")]
    [DisplayName("Nom de la partie non résolue")]
    [MaxLength(200)]
    public string UnresolvedPartyName {
        get {
            return GetAttributeValue<string>("unresolvedpartyname");
        }
        set {
            SetAttributeValue("unresolvedpartyname", value);
        }
    }
    
    [AttributeLogicalName("versionnumber")]
    public long? VersionNumber {
        get {
            return GetAttributeValue<long?>("versionnumber");
        }
    }
    
    /// <summary>
    /// <para>Display Name: msft_DataState</para>
    /// </summary>
    [AttributeLogicalName("msft_datastate")]
    [DisplayName("msft_DataState")]
    public msft_datastate? msft_DataState {
        get {
            return GetOptionSetValue<msft_datastate>("msft_datastate");
        }
    }
    
    [AttributeLogicalName("partyid")]
    [RelationshipSchemaName("account_activity_parties")]
    public Account account_activity_parties {
        get {
            return GetRelatedEntity<Account>("account_activity_parties", null);
        }
        set {
            SetRelatedEntity("account_activity_parties", null, value);
        }
    }
    
    [AttributeLogicalName("partyid")]
    [RelationshipSchemaName("contact_activity_parties")]
    public Contact contact_activity_parties {
        get {
            return GetRelatedEntity<Contact>("contact_activity_parties", null);
        }
        set {
            SetRelatedEntity("contact_activity_parties", null, value);
        }
    }
    
    [AttributeLogicalName("activityid")]
    [RelationshipSchemaName("email_activity_parties")]
    public Email email_activity_parties {
        get {
            return GetRelatedEntity<Email>("email_activity_parties", null);
        }
        set {
            SetRelatedEntity("email_activity_parties", null, value);
        }
    }
    
    [AttributeLogicalName("partyid")]
    [RelationshipSchemaName("incident_activity_parties")]
    public Incident incident_activity_parties {
        get {
            return GetRelatedEntity<Incident>("incident_activity_parties", null);
        }
        set {
            SetRelatedEntity("incident_activity_parties", null, value);
        }
    }
    
    [AttributeLogicalName("partyid")]
    [RelationshipSchemaName("invoice_activity_parties")]
    public Invoice invoice_activity_parties {
        get {
            return GetRelatedEntity<Invoice>("invoice_activity_parties", null);
        }
        set {
            SetRelatedEntity("invoice_activity_parties", null, value);
        }
    }
    
    [AttributeLogicalName("activityid")]
    [RelationshipSchemaName("nxt_Message_activity_parties")]
    public nxt_Message nxt_Message_activity_parties {
        get {
            return GetRelatedEntity<nxt_Message>("nxt_Message_activity_parties", null);
        }
        set {
            SetRelatedEntity("nxt_Message_activity_parties", null, value);
        }
    }
    
    [AttributeLogicalName("partyid")]
    [RelationshipSchemaName("nxt_contributor_ActivityParties")]
    public nxt_Contributor nxt_contributor_ActivityParties {
        get {
            return GetRelatedEntity<nxt_Contributor>("nxt_contributor_ActivityParties", null);
        }
        set {
            SetRelatedEntity("nxt_contributor_ActivityParties", null, value);
        }
    }
    
    [AttributeLogicalName("partyid")]
    [RelationshipSchemaName("nxt_customerfolder_ActivityParties")]
    public nxt_customerfolder nxt_customerfolder_ActivityParties {
        get {
            return GetRelatedEntity<nxt_customerfolder>("nxt_customerfolder_ActivityParties", null);
        }
        set {
            SetRelatedEntity("nxt_customerfolder_ActivityParties", null, value);
        }
    }
    
    [AttributeLogicalName("activityid")]
    [RelationshipSchemaName("phonecall_activity_parties")]
    public PhoneCall phonecall_activity_parties {
        get {
            return GetRelatedEntity<PhoneCall>("phonecall_activity_parties", null);
        }
        set {
            SetRelatedEntity("phonecall_activity_parties", null, value);
        }
    }
    
    [AttributeLogicalName("partyid")]
    [RelationshipSchemaName("queue_activity_parties")]
    public Queue queue_activity_parties {
        get {
            return GetRelatedEntity<Queue>("queue_activity_parties", null);
        }
        set {
            SetRelatedEntity("queue_activity_parties", null, value);
        }
    }
    
    [AttributeLogicalName("partyid")]
    [RelationshipSchemaName("quote_activity_parties")]
    public Quote quote_activity_parties {
        get {
            return GetRelatedEntity<Quote>("quote_activity_parties", null);
        }
        set {
            SetRelatedEntity("quote_activity_parties", null, value);
        }
    }
    
    [AttributeLogicalName("partyid")]
    [RelationshipSchemaName("salesorder_activity_parties")]
    public SalesOrder salesorder_activity_parties {
        get {
            return GetRelatedEntity<SalesOrder>("salesorder_activity_parties", null);
        }
        set {
            SetRelatedEntity("salesorder_activity_parties", null, value);
        }
    }
    
    [AttributeLogicalName("partyid")]
    [RelationshipSchemaName("system_user_activity_parties")]
    public SystemUser system_user_activity_parties {
        get {
            return GetRelatedEntity<SystemUser>("system_user_activity_parties", null);
        }
        set {
            SetRelatedEntity("system_user_activity_parties", null, value);
        }
    }
    
    public static ActivityParty Retrieve(IOrganizationService service, Guid id, params Expression<Func<ActivityParty,object>>[] attrs) {
        return service.Retrieve(id, attrs);
    }
}

[DataContract()]
public enum ActivityParty_InstanceTypeCode {
    
    [EnumMember()]
    [OptionSetMetadata("Non périodique", Index=0, Lcid=1036)]
    Nonpériodique = 0,
    
    [EnumMember()]
    [OptionSetMetadata("Enregistrement principal périodique", Index=1, Lcid=1036)]
    Enregistrementprincipalpériodique = 1,
    
    [EnumMember()]
    [OptionSetMetadata("Instance périodique", Index=2, Lcid=1036)]
    Instancepériodique = 2,
    
    [EnumMember()]
    [OptionSetMetadata("Exception périodique", Index=3, Lcid=1036)]
    Exceptionpériodique = 3,
    
    [EnumMember()]
    [OptionSetMetadata("Exception future périodique", Index=4, Lcid=1036)]
    Exceptionfuturepériodique = 4,
}

[DataContract()]
public enum ActivityParty_ParticipationTypeMask {
    
    [EnumMember()]
    [OptionSetMetadata("Expéditeur", Index=0, Lcid=1036)]
    Expéditeur = 1,
    
    [EnumMember()]
    [OptionSetMetadata("Destinataire À", Index=1, Lcid=1036)]
    DestinataireÀ = 2,
    
    [EnumMember()]
    [OptionSetMetadata("Destinataire Cc", Index=2, Lcid=1036)]
    DestinataireCc = 3,
    
    [EnumMember()]
    [OptionSetMetadata("Destinataire Cci", Index=3, Lcid=1036)]
    DestinataireCci = 4,
    
    [EnumMember()]
    [OptionSetMetadata("Participant obligatoire", Index=4, Lcid=1036)]
    Participantobligatoire = 5,
    
    [EnumMember()]
    [OptionSetMetadata("Participant facultatif", Index=5, Lcid=1036)]
    Participantfacultatif = 6,
    
    [EnumMember()]
    [OptionSetMetadata("Organisateur", Index=6, Lcid=1036)]
    Organisateur = 7,
    
    [EnumMember()]
    [OptionSetMetadata("Concernant", Index=7, Lcid=1036)]
    Concernant = 8,
    
    [EnumMember()]
    [OptionSetMetadata("Propriétaire", Index=8, Lcid=1036)]
    Propriétaire = 9,
    
    [EnumMember()]
    [OptionSetMetadata("Ressource", Index=9, Lcid=1036)]
    Ressource = 10,
    
    [EnumMember()]
    [OptionSetMetadata("Client", Index=10, Lcid=1036)]
    Client = 11,
    
    [EnumMember()]
    [OptionSetMetadata("Participant à la conversation instantanée", Index=11, Lcid=1036)]
    Participantàlaconversationinstantanée = 12,
    
    [EnumMember()]
    [OptionSetMetadata("Associé", Index=12, Lcid=1036)]
    Associé = 13,
}
