//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using DG.XrmContext;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;




/// <summary>
/// <para>Relation entre deux entités.</para>
/// <para>Display Name: Connexion</para>
/// </summary>
[EntityLogicalName("connection")]
[DebuggerDisplay("{DebuggerDisplay,nq}")]
[DataContract()]
public partial class Connection : ExtendedEntity<ConnectionState, Connection_StatusCode> {
    
    public const string EntityLogicalName = "connection";
    
    public const int EntityTypeCode = 3234;
    
    public Connection() : 
            base(EntityLogicalName) {
    }
    
    public Connection(Guid Id) : 
            base(EntityLogicalName, Id) {
    }
    
    private string DebuggerDisplay {
        get {
            return GetDebuggerDisplay("name");
        }
    }
    
    [AttributeLogicalName("connectionid")]
    public override Guid Id {
        get {
            return base.Id;
        }
        set {
            SetId("connectionid", value);
        }
    }
    
    /// <summary>
    /// <para>Identificateur unique de la connexion.</para>
    /// <para>Display Name: Connexion</para>
    /// </summary>
    [AttributeLogicalName("connectionid")]
    [DisplayName("Connexion")]
    public Guid? ConnectionId {
        get {
            return GetAttributeValue<Guid?>("connectionid");
        }
        set {
            SetId("connectionid", value);
        }
    }
    
    /// <summary>
    /// <para>Affiche le créateur de l'enregistrement.</para>
    /// <para>Display Name: Créé par</para>
    /// </summary>
    [AttributeLogicalName("createdby")]
    [DisplayName("Créé par")]
    public EntityReference CreatedBy {
        get {
            return GetAttributeValue<EntityReference>("createdby");
        }
    }
    
    /// <summary>
    /// <para>Affiche la date et l'heure de la création de l'enregistrement. Celles-ci sont affichées dans le fuseau horaire sélectionné dans les options de Microsoft Dynamics 365.</para>
    /// <para>Display Name: Créé le</para>
    /// </summary>
    [AttributeLogicalName("createdon")]
    [DisplayName("Créé le")]
    public DateTime? CreatedOn {
        get {
            return GetAttributeValue<DateTime?>("createdon");
        }
    }
    
    /// <summary>
    /// <para>Affiche l'utilisateur qui a créé l'enregistrement pour un autre utilisateur.</para>
    /// <para>Display Name: Créé par (délégué)</para>
    /// </summary>
    [AttributeLogicalName("createdonbehalfby")]
    [DisplayName("Créé par (délégué)")]
    public EntityReference CreatedOnBehalfBy {
        get {
            return GetAttributeValue<EntityReference>("createdonbehalfby");
        }
    }
    
    /// <summary>
    /// <para>Entrez des informations supplémentaires pour décrire les rapports, comme la durée ou la qualité de la relation.</para>
    /// <para>Display Name: Description</para>
    /// </summary>
    [AttributeLogicalName("description")]
    [DisplayName("Description")]
    public string Description {
        get {
            return GetAttributeValue<string>("description");
        }
        set {
            SetAttributeValue("description", value);
        }
    }
    
    /// <summary>
    /// <para>Entrez la date de fin des rapports.</para>
    /// <para>Display Name: Fin</para>
    /// </summary>
    [AttributeLogicalName("effectiveend")]
    [DisplayName("Fin")]
    public DateTime? EffectiveEnd {
        get {
            return GetAttributeValue<DateTime?>("effectiveend");
        }
        set {
            SetAttributeValue("effectiveend", value);
        }
    }
    
    /// <summary>
    /// <para>Entrez la date de début des rapports.</para>
    /// <para>Display Name: Début</para>
    /// </summary>
    [AttributeLogicalName("effectivestart")]
    [DisplayName("Début")]
    public DateTime? EffectiveStart {
        get {
            return GetAttributeValue<DateTime?>("effectivestart");
        }
        set {
            SetAttributeValue("effectivestart", value);
        }
    }
    
    /// <summary>
    /// <para>Utilisation interne uniquement.</para>
    /// <para>Display Name: Code d'image de l'entité</para>
    /// </summary>
    [AttributeLogicalName("entityimageid")]
    [DisplayName("Code d\'image de l\'entité")]
    public Guid? EntityImageId {
        get {
            return GetAttributeValue<Guid?>("entityimageid");
        }
    }
    
    /// <summary>
    /// <para>Affiche le taux de conversion de la devise de l'enregistrement. Le taux de change permet de convertir tous les champs d'argent de l'enregistrement de la devise locale en devise par défaut du système.</para>
    /// <para>Display Name: Taux de change</para>
    /// </summary>
    [AttributeLogicalName("exchangerate")]
    [DisplayName("Taux de change")]
    public decimal? ExchangeRate {
        get {
            return GetAttributeValue<decimal?>("exchangerate");
        }
    }
    
    /// <summary>
    /// <para>Identificateur unique de l'importation ou de la migration de données ayant généré cet enregistrement.</para>
    /// <para>Display Name: Numéro séquentiel d'importation</para>
    /// </summary>
    [AttributeLogicalName("importsequencenumber")]
    [DisplayName("Numéro séquentiel d\'importation")]
    [Range(-2147483648, 2147483647)]
    public int? ImportSequenceNumber {
        get {
            return GetAttributeValue<int?>("importsequencenumber");
        }
        set {
            SetAttributeValue("importsequencenumber", value);
        }
    }
    
    /// <summary>
    /// <para>Indique qu’il s’agit de l’enregistrement principal.</para>
    /// <para>Display Name: Est principal</para>
    /// </summary>
    [AttributeLogicalName("ismaster")]
    [DisplayName("Est principal")]
    public bool? IsMaster {
        get {
            return GetAttributeValue<bool?>("ismaster");
        }
    }
    
    /// <summary>
    /// <para>Affiche la personne à l'origine de la dernière mise à jour de l'enregistrement.</para>
    /// <para>Display Name: Modifié par</para>
    /// </summary>
    [AttributeLogicalName("modifiedby")]
    [DisplayName("Modifié par")]
    public EntityReference ModifiedBy {
        get {
            return GetAttributeValue<EntityReference>("modifiedby");
        }
    }
    
    /// <summary>
    /// <para>Affiche la date et l'heure de la dernière mise à jour de l'enregistrement. La date et l'heure sont affichées selon le fuseau horaire sélectionné dans les options de Microsoft Dynamics 365.</para>
    /// <para>Display Name: Modifié le</para>
    /// </summary>
    [AttributeLogicalName("modifiedon")]
    [DisplayName("Modifié le")]
    public DateTime? ModifiedOn {
        get {
            return GetAttributeValue<DateTime?>("modifiedon");
        }
    }
    
    /// <summary>
    /// <para>Affiche la personne à l'origine de la dernière mise à jour de l'enregistrement à la place d'un autre utilisateur.</para>
    /// <para>Display Name: Modifié par (délégué)</para>
    /// </summary>
    [AttributeLogicalName("modifiedonbehalfby")]
    [DisplayName("Modifié par (délégué)")]
    public EntityReference ModifiedOnBehalfBy {
        get {
            return GetAttributeValue<EntityReference>("modifiedonbehalfby");
        }
    }
    
    /// <summary>
    /// <para>Nom de la connexion.</para>
    /// <para>Display Name: Nom de connexion</para>
    /// </summary>
    [AttributeLogicalName("name")]
    [DisplayName("Nom de connexion")]
    [MaxLength(500)]
    public string Name {
        get {
            return GetAttributeValue<string>("name");
        }
    }
    
    /// <summary>
    /// <para>Date et heure de la migration de l'enregistrement.</para>
    /// <para>Display Name: Enregistrement créé le</para>
    /// </summary>
    [AttributeLogicalName("overriddencreatedon")]
    [DisplayName("Enregistrement créé le")]
    public DateTime? OverriddenCreatedOn {
        get {
            return GetAttributeValue<DateTime?>("overriddencreatedon");
        }
        set {
            SetAttributeValue("overriddencreatedon", value);
        }
    }
    
    /// <summary>
    /// <para>Entrez l'utilisateur ou l'équipe affectée à la gestion de l'enregistrement. Ce champ est mis à jour à chaque fois que l'enregistrement est attribué à un utilisateur différent.</para>
    /// <para>Display Name: Propriétaire</para>
    /// </summary>
    [AttributeLogicalName("ownerid")]
    [DisplayName("Propriétaire")]
    public EntityReference OwnerId {
        get {
            return GetAttributeValue<EntityReference>("ownerid");
        }
        set {
            SetAttributeValue("ownerid", value);
        }
    }
    
    /// <summary>
    /// <para>Affiche la division à laquelle le propriétaire appartient.</para>
    /// <para>Display Name: Division propriétaire</para>
    /// </summary>
    [AttributeLogicalName("owningbusinessunit")]
    [DisplayName("Division propriétaire")]
    public EntityReference OwningBusinessUnit {
        get {
            return GetAttributeValue<EntityReference>("owningbusinessunit");
        }
    }
    
    /// <summary>
    /// <para>Identificateur unique de l’équipe propriétaire de la connexion.</para>
    /// <para>Display Name: Équipe propriétaire</para>
    /// </summary>
    [AttributeLogicalName("owningteam")]
    [DisplayName("Équipe propriétaire")]
    public EntityReference OwningTeam {
        get {
            return GetAttributeValue<EntityReference>("owningteam");
        }
    }
    
    /// <summary>
    /// <para>Identificateur unique de l’utilisateur propriétaire de la connexion.</para>
    /// <para>Display Name: Utilisateur propriétaire</para>
    /// </summary>
    [AttributeLogicalName("owninguser")]
    [DisplayName("Utilisateur propriétaire")]
    public EntityReference OwningUser {
        get {
            return GetAttributeValue<EntityReference>("owninguser");
        }
    }
    
    /// <summary>
    /// <para>Nom de la connexion.</para>
    /// <para>Display Name: Nom de connexion</para>
    /// </summary>
    [AttributeLogicalName("name")]
    [DisplayName("Nom de connexion")]
    [MaxLength(500)]
    public string PrimaryNameField {
        get {
            return GetAttributeValue<string>("name");
        }
    }
    
    /// <summary>
    /// <para>Identificateur unique de l'enregistrement source.</para>
    /// <para>Display Name: Connecté de</para>
    /// </summary>
    [AttributeLogicalName("record1id")]
    [DisplayName("Connecté de")]
    public EntityReference Record1Id {
        get {
            return GetAttributeValue<EntityReference>("record1id");
        }
        set {
            SetAttributeValue("record1id", value);
        }
    }
    
    /// <summary>
    /// <para>Affiche le type d'enregistrement de l'enregistrement source.</para>
    /// <para>Display Name: Type (De)</para>
    /// </summary>
    [AttributeLogicalName("record1objecttypecode")]
    [DisplayName("Type (De)")]
    public Connection_Record1ObjectTypeCode? Record1ObjectTypeCode {
        get {
            return GetOptionSetValue<Connection_Record1ObjectTypeCode>("record1objecttypecode");
        }
    }
    
    /// <summary>
    /// <para>Sélectionnez le rôle ou la relation entre la partie principale et la partie secondaire.</para>
    /// <para>Display Name: Rôle (De)</para>
    /// </summary>
    [AttributeLogicalName("record1roleid")]
    [DisplayName("Rôle (De)")]
    public EntityReference Record1RoleId {
        get {
            return GetAttributeValue<EntityReference>("record1roleid");
        }
        set {
            SetAttributeValue("record1roleid", value);
        }
    }
    
    /// <summary>
    /// <para>Identificateur unique de l'enregistrement cible.</para>
    /// <para>Display Name: Connecté à</para>
    /// </summary>
    [AttributeLogicalName("record2id")]
    [DisplayName("Connecté à")]
    public EntityReference Record2Id {
        get {
            return GetAttributeValue<EntityReference>("record2id");
        }
        set {
            SetAttributeValue("record2id", value);
        }
    }
    
    /// <summary>
    /// <para>Affiche le type d'enregistrement de l'enregistrement cible.</para>
    /// <para>Display Name: Type (cible)</para>
    /// </summary>
    [AttributeLogicalName("record2objecttypecode")]
    [DisplayName("Type (cible)")]
    public Connection_Record2ObjectTypeCode? Record2ObjectTypeCode {
        get {
            return GetOptionSetValue<Connection_Record2ObjectTypeCode>("record2objecttypecode");
        }
    }
    
    /// <summary>
    /// <para>Sélectionnez le rôle ou la relation entre la partie secondaire et la partie principale.</para>
    /// <para>Display Name: Rôle (cible)</para>
    /// </summary>
    [AttributeLogicalName("record2roleid")]
    [DisplayName("Rôle (cible)")]
    public EntityReference Record2RoleId {
        get {
            return GetAttributeValue<EntityReference>("record2roleid");
        }
        set {
            SetAttributeValue("record2roleid", value);
        }
    }
    
    /// <summary>
    /// <para>Identificateur unique de l’enregistrement de connexion réciproque.</para>
    /// <para>Display Name: Connexion réciproque</para>
    /// </summary>
    [AttributeLogicalName("relatedconnectionid")]
    [DisplayName("Connexion réciproque")]
    public EntityReference RelatedConnectionId {
        get {
            return GetAttributeValue<EntityReference>("relatedconnectionid");
        }
    }
    
    /// <summary>
    /// <para>Indique si les rapports sont actifs ou inactifs. Les rapports inactifs sont en lecture seule et ne peuvent pas être modifiés avant d'être réactivés.</para>
    /// <para>Display Name: Statut</para>
    /// </summary>
    [AttributeLogicalName("statecode")]
    [DisplayName("Statut")]
    public ConnectionState? StateCode {
        get {
            return GetOptionSetValue<ConnectionState>("statecode");
        }
        set {
            SetOptionSetValue("statecode", value);
        }
    }
    
    /// <summary>
    /// <para>Raison du statut de la connexion.</para>
    /// <para>Display Name: Raison du statut</para>
    /// </summary>
    [AttributeLogicalName("statuscode")]
    [DisplayName("Raison du statut")]
    public Connection_StatusCode? StatusCode {
        get {
            return GetOptionSetValue<Connection_StatusCode>("statuscode");
        }
        set {
            SetOptionSetValue("statuscode", value);
        }
    }
    
    /// <summary>
    /// <para>Choisissez la devise locale pour l'enregistrement pour vous assurer que les budgets sont validés dans la devise correcte.</para>
    /// <para>Display Name: Devise</para>
    /// </summary>
    [AttributeLogicalName("transactioncurrencyid")]
    [DisplayName("Devise")]
    public EntityReference TransactionCurrencyId {
        get {
            return GetAttributeValue<EntityReference>("transactioncurrencyid");
        }
        set {
            SetAttributeValue("transactioncurrencyid", value);
        }
    }
    
    /// <summary>
    /// <para>Numéro de version de la connexion.</para>
    /// <para>Display Name: Numéro de version</para>
    /// </summary>
    [AttributeLogicalName("versionnumber")]
    [DisplayName("Numéro de version")]
    public long? VersionNumber {
        get {
            return GetAttributeValue<long?>("versionnumber");
        }
    }
    
    /// <summary>
    /// <para>Display Name: msft_DataState</para>
    /// </summary>
    [AttributeLogicalName("msft_datastate")]
    [DisplayName("msft_DataState")]
    public msft_datastate? msft_DataState {
        get {
            return GetOptionSetValue<msft_datastate>("msft_datastate");
        }
    }
    
    [RelationshipSchemaName("connection_related_connection", EntityRole.Referenced)]
    public IEnumerable<Connection> Referencedconnection_related_connection {
        get {
            return GetRelatedEntities<Connection>("connection_related_connection", EntityRole.Referenced);
        }
        set {
            SetRelatedEntities("connection_related_connection", EntityRole.Referenced, value);
        }
    }
    
    [AttributeLogicalName("relatedconnectionid")]
    [RelationshipSchemaName("connection_related_connection", EntityRole.Referencing)]
    public Connection Referencingconnection_related_connection {
        get {
            return GetRelatedEntity<Connection>("connection_related_connection", EntityRole.Referencing);
        }
        set {
            SetRelatedEntity("connection_related_connection", EntityRole.Referencing, value);
        }
    }
    
    [AttributeLogicalName("record1id")]
    [RelationshipSchemaName("account_connections1")]
    public Account account_connections1 {
        get {
            return GetRelatedEntity<Account>("account_connections1", null);
        }
        set {
            SetRelatedEntity("account_connections1", null, value);
        }
    }
    
    [AttributeLogicalName("record2id")]
    [RelationshipSchemaName("account_connections2")]
    public Account account_connections2 {
        get {
            return GetRelatedEntity<Account>("account_connections2", null);
        }
        set {
            SetRelatedEntity("account_connections2", null, value);
        }
    }
    
    [AttributeLogicalName("owningbusinessunit")]
    [RelationshipSchemaName("business_unit_connections")]
    public BusinessUnit business_unit_connections {
        get {
            return GetRelatedEntity<BusinessUnit>("business_unit_connections", null);
        }
        set {
            SetRelatedEntity("business_unit_connections", null, value);
        }
    }
    
    [AttributeLogicalName("record1id")]
    [RelationshipSchemaName("contact_connections1")]
    public Contact contact_connections1 {
        get {
            return GetRelatedEntity<Contact>("contact_connections1", null);
        }
        set {
            SetRelatedEntity("contact_connections1", null, value);
        }
    }
    
    [AttributeLogicalName("record2id")]
    [RelationshipSchemaName("contact_connections2")]
    public Contact contact_connections2 {
        get {
            return GetRelatedEntity<Contact>("contact_connections2", null);
        }
        set {
            SetRelatedEntity("contact_connections2", null, value);
        }
    }
    
    [AttributeLogicalName("createdby")]
    [RelationshipSchemaName("createdby_connection")]
    public SystemUser createdby_connection {
        get {
            return GetRelatedEntity<SystemUser>("createdby_connection", null);
        }
        set {
            SetRelatedEntity("createdby_connection", null, value);
        }
    }
    
    [AttributeLogicalName("record1id")]
    [RelationshipSchemaName("email_connections1")]
    public Email email_connections1 {
        get {
            return GetRelatedEntity<Email>("email_connections1", null);
        }
        set {
            SetRelatedEntity("email_connections1", null, value);
        }
    }
    
    [AttributeLogicalName("record2id")]
    [RelationshipSchemaName("email_connections2")]
    public Email email_connections2 {
        get {
            return GetRelatedEntity<Email>("email_connections2", null);
        }
        set {
            SetRelatedEntity("email_connections2", null, value);
        }
    }
    
    [AttributeLogicalName("record1id")]
    [RelationshipSchemaName("incident_connections1")]
    public Incident incident_connections1 {
        get {
            return GetRelatedEntity<Incident>("incident_connections1", null);
        }
        set {
            SetRelatedEntity("incident_connections1", null, value);
        }
    }
    
    [AttributeLogicalName("record2id")]
    [RelationshipSchemaName("incident_connections2")]
    public Incident incident_connections2 {
        get {
            return GetRelatedEntity<Incident>("incident_connections2", null);
        }
        set {
            SetRelatedEntity("incident_connections2", null, value);
        }
    }
    
    [AttributeLogicalName("record1id")]
    [RelationshipSchemaName("invoice_connections1")]
    public Invoice invoice_connections1 {
        get {
            return GetRelatedEntity<Invoice>("invoice_connections1", null);
        }
        set {
            SetRelatedEntity("invoice_connections1", null, value);
        }
    }
    
    [AttributeLogicalName("record2id")]
    [RelationshipSchemaName("invoice_connections2")]
    public Invoice invoice_connections2 {
        get {
            return GetRelatedEntity<Invoice>("invoice_connections2", null);
        }
        set {
            SetRelatedEntity("invoice_connections2", null, value);
        }
    }
    
    [AttributeLogicalName("createdonbehalfby")]
    [RelationshipSchemaName("lk_connectionbase_createdonbehalfby")]
    public SystemUser lk_connectionbase_createdonbehalfby {
        get {
            return GetRelatedEntity<SystemUser>("lk_connectionbase_createdonbehalfby", null);
        }
        set {
            SetRelatedEntity("lk_connectionbase_createdonbehalfby", null, value);
        }
    }
    
    [AttributeLogicalName("modifiedonbehalfby")]
    [RelationshipSchemaName("lk_connectionbase_modifiedonbehalfby")]
    public SystemUser lk_connectionbase_modifiedonbehalfby {
        get {
            return GetRelatedEntity<SystemUser>("lk_connectionbase_modifiedonbehalfby", null);
        }
        set {
            SetRelatedEntity("lk_connectionbase_modifiedonbehalfby", null, value);
        }
    }
    
    [AttributeLogicalName("modifiedby")]
    [RelationshipSchemaName("modifiedby_connection")]
    public SystemUser modifiedby_connection {
        get {
            return GetRelatedEntity<SystemUser>("modifiedby_connection", null);
        }
        set {
            SetRelatedEntity("modifiedby_connection", null, value);
        }
    }
    
    [AttributeLogicalName("record1id")]
    [RelationshipSchemaName("nxt_commercialphase_connections1")]
    public nxt_CommercialPhase nxt_commercialphase_connections1 {
        get {
            return GetRelatedEntity<nxt_CommercialPhase>("nxt_commercialphase_connections1", null);
        }
        set {
            SetRelatedEntity("nxt_commercialphase_connections1", null, value);
        }
    }
    
    [AttributeLogicalName("record2id")]
    [RelationshipSchemaName("nxt_commercialphase_connections2")]
    public nxt_CommercialPhase nxt_commercialphase_connections2 {
        get {
            return GetRelatedEntity<nxt_CommercialPhase>("nxt_commercialphase_connections2", null);
        }
        set {
            SetRelatedEntity("nxt_commercialphase_connections2", null, value);
        }
    }
    
    [AttributeLogicalName("record1id")]
    [RelationshipSchemaName("nxt_customerfolder_connections1")]
    public nxt_customerfolder nxt_customerfolder_connections1 {
        get {
            return GetRelatedEntity<nxt_customerfolder>("nxt_customerfolder_connections1", null);
        }
        set {
            SetRelatedEntity("nxt_customerfolder_connections1", null, value);
        }
    }
    
    [AttributeLogicalName("record2id")]
    [RelationshipSchemaName("nxt_customerfolder_connections2")]
    public nxt_customerfolder nxt_customerfolder_connections2 {
        get {
            return GetRelatedEntity<nxt_customerfolder>("nxt_customerfolder_connections2", null);
        }
        set {
            SetRelatedEntity("nxt_customerfolder_connections2", null, value);
        }
    }
    
    [AttributeLogicalName("record1id")]
    [RelationshipSchemaName("nxt_loan_connections1")]
    public nxt_Loan nxt_loan_connections1 {
        get {
            return GetRelatedEntity<nxt_Loan>("nxt_loan_connections1", null);
        }
        set {
            SetRelatedEntity("nxt_loan_connections1", null, value);
        }
    }
    
    [AttributeLogicalName("record2id")]
    [RelationshipSchemaName("nxt_loan_connections2")]
    public nxt_Loan nxt_loan_connections2 {
        get {
            return GetRelatedEntity<nxt_Loan>("nxt_loan_connections2", null);
        }
        set {
            SetRelatedEntity("nxt_loan_connections2", null, value);
        }
    }
    
    [AttributeLogicalName("record1id")]
    [RelationshipSchemaName("nxt_message_connections1")]
    public nxt_Message nxt_message_connections1 {
        get {
            return GetRelatedEntity<nxt_Message>("nxt_message_connections1", null);
        }
        set {
            SetRelatedEntity("nxt_message_connections1", null, value);
        }
    }
    
    [AttributeLogicalName("record2id")]
    [RelationshipSchemaName("nxt_message_connections2")]
    public nxt_Message nxt_message_connections2 {
        get {
            return GetRelatedEntity<nxt_Message>("nxt_message_connections2", null);
        }
        set {
            SetRelatedEntity("nxt_message_connections2", null, value);
        }
    }
    
    [AttributeLogicalName("record1id")]
    [RelationshipSchemaName("nxt_personaldata_connections1")]
    public nxt_PersonalData nxt_personaldata_connections1 {
        get {
            return GetRelatedEntity<nxt_PersonalData>("nxt_personaldata_connections1", null);
        }
        set {
            SetRelatedEntity("nxt_personaldata_connections1", null, value);
        }
    }
    
    [AttributeLogicalName("record2id")]
    [RelationshipSchemaName("nxt_personaldata_connections2")]
    public nxt_PersonalData nxt_personaldata_connections2 {
        get {
            return GetRelatedEntity<nxt_PersonalData>("nxt_personaldata_connections2", null);
        }
        set {
            SetRelatedEntity("nxt_personaldata_connections2", null, value);
        }
    }
    
    [AttributeLogicalName("record1id")]
    [RelationshipSchemaName("phonecall_connections1")]
    public PhoneCall phonecall_connections1 {
        get {
            return GetRelatedEntity<PhoneCall>("phonecall_connections1", null);
        }
        set {
            SetRelatedEntity("phonecall_connections1", null, value);
        }
    }
    
    [AttributeLogicalName("record2id")]
    [RelationshipSchemaName("phonecall_connections2")]
    public PhoneCall phonecall_connections2 {
        get {
            return GetRelatedEntity<PhoneCall>("phonecall_connections2", null);
        }
        set {
            SetRelatedEntity("phonecall_connections2", null, value);
        }
    }
    
    [AttributeLogicalName("record1id")]
    [RelationshipSchemaName("quote_connections1")]
    public Quote quote_connections1 {
        get {
            return GetRelatedEntity<Quote>("quote_connections1", null);
        }
        set {
            SetRelatedEntity("quote_connections1", null, value);
        }
    }
    
    [AttributeLogicalName("record2id")]
    [RelationshipSchemaName("quote_connections2")]
    public Quote quote_connections2 {
        get {
            return GetRelatedEntity<Quote>("quote_connections2", null);
        }
        set {
            SetRelatedEntity("quote_connections2", null, value);
        }
    }
    
    [AttributeLogicalName("record1id")]
    [RelationshipSchemaName("salesorder_connections1")]
    public SalesOrder salesorder_connections1 {
        get {
            return GetRelatedEntity<SalesOrder>("salesorder_connections1", null);
        }
        set {
            SetRelatedEntity("salesorder_connections1", null, value);
        }
    }
    
    [AttributeLogicalName("record2id")]
    [RelationshipSchemaName("salesorder_connections2")]
    public SalesOrder salesorder_connections2 {
        get {
            return GetRelatedEntity<SalesOrder>("salesorder_connections2", null);
        }
        set {
            SetRelatedEntity("salesorder_connections2", null, value);
        }
    }
    
    [AttributeLogicalName("record1id")]
    [RelationshipSchemaName("systemuser_connections1")]
    public SystemUser systemuser_connections1 {
        get {
            return GetRelatedEntity<SystemUser>("systemuser_connections1", null);
        }
        set {
            SetRelatedEntity("systemuser_connections1", null, value);
        }
    }
    
    [AttributeLogicalName("record2id")]
    [RelationshipSchemaName("systemuser_connections2")]
    public SystemUser systemuser_connections2 {
        get {
            return GetRelatedEntity<SystemUser>("systemuser_connections2", null);
        }
        set {
            SetRelatedEntity("systemuser_connections2", null, value);
        }
    }
    
    [AttributeLogicalName("record1id")]
    [RelationshipSchemaName("team_connections1")]
    public Team team_connections1 {
        get {
            return GetRelatedEntity<Team>("team_connections1", null);
        }
        set {
            SetRelatedEntity("team_connections1", null, value);
        }
    }
    
    [AttributeLogicalName("record2id")]
    [RelationshipSchemaName("team_connections2")]
    public Team team_connections2 {
        get {
            return GetRelatedEntity<Team>("team_connections2", null);
        }
        set {
            SetRelatedEntity("team_connections2", null, value);
        }
    }
    
    public static Connection Retrieve(IOrganizationService service, Guid id, params Expression<Func<Connection,object>>[] attrs) {
        return service.Retrieve(id, attrs);
    }
}

[DataContract()]
public enum ConnectionState {
    
    [EnumMember()]
    [OptionSetMetadata("Actif", Index=0, Lcid=1036)]
    Actif = 0,
    
    [EnumMember()]
    [OptionSetMetadata("Inactif", Index=1, Lcid=1036)]
    Inactif = 1,
}

[DataContract()]
public enum Connection_Record1ObjectTypeCode {
    
    [EnumMember()]
    [OptionSetMetadata("Compte", Index=31, Lcid=1036, Description="Entité commerciale qui représente un client ou un prospect. Société facturée dans" +
        " les transactions professionnelles.")]
    Compte = 1,
    
    [EnumMember()]
    [OptionSetMetadata("Individu", Index=35, Lcid=1036, Description="Personne liée à une division, telle qu\'un client, un fournisseur ou un collègue.")]
    Individu = 2,
    
    [EnumMember()]
    [OptionSetMetadata("Opportunité", Index=7, Lcid=1036, Description="Événement potentiellement générateur de revenus (ou vente à un compte) qui doit ê" +
        "tre suivi jusqu\'à sa conclusion via un processus de vente.")]
    Opportunité = 3,
    
    [EnumMember()]
    [OptionSetMetadata("Prospect", Index=75, Lcid=1036, Description="Prospect ou opportunité commerciale potentielle. Les prospects sont convertis en " +
        "comptes, contacts ou opportunités lorsqu\'ils sont « inclus ». Dans le cas contra" +
        "ire, ils sont supprimés ou archivés.")]
    Prospect = 4,
    
    [EnumMember()]
    [OptionSetMetadata("Utilisateur", Index=73, Lcid=1036, Description="Personne ayant accès au système Microsoft CRM et qui possède des objets dans la b" +
        "ase de données Microsoft CRM.")]
    Utilisateur = 8,
    
    [EnumMember()]
    [OptionSetMetadata("Équipe", Index=39, Lcid=1036, Description=@"Groupe d’utilisateurs système qui collabore de façon régulière. Les équipes peuvent être utilisées pour simplifier le partage des enregistrements et fournir aux membres de l’équipe un accès commun aux données de l’organisation lorsque ceux-ci appartiennent à des divisions différentes.")]
    Équipe = 9,
    
    [EnumMember()]
    [OptionSetMetadata("Poste", Index=62, Lcid=1036, Description="Position d\'un utilisateur dans la hiérarchie")]
    Poste = 50,
    
    [EnumMember()]
    [OptionSetMetadata("Profil social", Index=21, Lcid=1036, Description="Cette entité permet de stocker les informations de profil social du compte et des" +
        " contacts associés sur différents canaux sociaux.")]
    Profilsocial = 99,
    
    [EnumMember()]
    [OptionSetMetadata("Demande", Index=65, Lcid=1036, Description="Incident de requête de service associé à un contrat.")]
    Demande = 112,
    
    [EnumMember()]
    [OptionSetMetadata("Concurrent", Index=10, Lcid=1036, Description="Entreprise concurrente pour la vente, représentée par un prospect ou une opportun" +
        "ité.")]
    Concurrent = 123,
    
    [EnumMember()]
    [OptionSetMetadata("Contrat (Standard)", Index=33, Lcid=1036, Description="Accord sur la fourniture d\'un service clientèle définie pour un nombre d\'incident" +
        "s ou pour une durée spécifique.")]
    ContratStandard = 1010,
    
    [EnumMember()]
    [OptionSetMetadata("Tarifs", Index=47, Lcid=1036, Description="Entité qui définit les niveaux de tarification.")]
    Tarifs = 1022,
    
    [EnumMember()]
    [OptionSetMetadata("Produit", Index=68, Lcid=1036, Description="Informations sur les produits et leur tarification.")]
    Produit = 1024,
    
    [EnumMember()]
    [OptionSetMetadata("Devis", Index=9, Lcid=1036, Description="Offre formelle de produits et/ou de services, définie en fonction de prix spécifi" +
        "ques et de modalités de paiement correspondantes, envoyée à un prospect.")]
    Devis = 1084,
    
    [EnumMember()]
    [OptionSetMetadata("Commande", Index=61, Lcid=1036, Description="Devis ayant été accepté.")]
    Commande = 1088,
    
    [EnumMember()]
    [OptionSetMetadata("Facture", Index=30, Lcid=1036, Description="Commande qui a été facturée.")]
    Facture = 1090,
    
    [EnumMember()]
    [OptionSetMetadata("Secteur de vente", Index=11, Lcid=1036, Description="Le secteur de vente représente les régions commerciales.")]
    Secteurdevente = 2013,
    
    [EnumMember()]
    [OptionSetMetadata("Installation/équipement", Index=46, Lcid=1036, Description="Ressource pouvant faire l\'objet d\'une planification.")]
    Installationéquipement = 4000,
    
    [EnumMember()]
    [OptionSetMetadata("Groupe de planification", Index=70, Lcid=1036, Description="Groupe de ressources ou équipe dont les membres peuvent être planifiés pour un se" +
        "rvice.")]
    Groupedeplanification = 4005,
    
    [EnumMember()]
    [OptionSetMetadata("Groupe de ressources", Index=53, Lcid=1036, Description="Groupe ou ensemble de personnes, équipement et installation pouvant faire l\'objet" +
        " d\'une planification.")]
    Groupederessources = 4007,
    
    [EnumMember()]
    [OptionSetMetadata("Activité", Index=19, Lcid=1036, Description="Tâche effectuée ou à effectuer par un utilisateur. Une activité est une action po" +
        "ur laquelle on peut placer une entrée dans le calendrier.")]
    Activité = 4200,
    
    [EnumMember()]
    [OptionSetMetadata("Rendez-vous", Index=2, Lcid=1036, Description="Engagement représentant un intervalle de temps avec heures de début/fin et durée." +
        "")]
    Rendezvous = 4201,
    
    [EnumMember()]
    [OptionSetMetadata("Courrier électronique", Index=49, Lcid=1036, Description="Activité effectuée via des protocoles de courrier électronique.")]
    Courrierélectronique = 4202,
    
    [EnumMember()]
    [OptionSetMetadata("Télécopie", Index=12, Lcid=1036, Description="Activité qui vérifie le résultat d\'un appel et le nombre de pages d\'une télécopie" +
        ", et qui stocke éventuellement la copie électronique du document.")]
    Télécopie = 4204,
    
    [EnumMember()]
    [OptionSetMetadata("Lettre", Index=51, Lcid=1036, Description="Activité qui assure le suivi de la livraison d\'une lettre. L\'activité peut conten" +
        "ir la copie électronique de la lettre.")]
    Lettre = 4207,
    
    [EnumMember()]
    [OptionSetMetadata("Appel téléphonique", Index=17, Lcid=1036, Description="Activité de suivi d\'un appel téléphonique.")]
    Appeltéléphonique = 4210,
    
    [EnumMember()]
    [OptionSetMetadata("Tâche", Index=58, Lcid=1036, Description="Activité générique représentant le travail à effectuer.")]
    Tâche = 4212,
    
    [EnumMember()]
    [OptionSetMetadata("Activité de service", Index=66, Lcid=1036, Description="Activité de l\'organisation destinée à satisfaire les besoins de son client. Chaqu" +
        "e activité de service comprend la date, l\'heure, la durée et les ressources requ" +
        "ises.")]
    Activitédeservice = 4214,
    
    [EnumMember()]
    [OptionSetMetadata("Activité sociale", Index=56, Lcid=1036, Description="Utilisation interne uniquement.")]
    Activitésociale = 4216,
    
    [EnumMember()]
    [OptionSetMetadata("Rendez-vous périodique", Index=78, Lcid=1036, Description="Rendez-vous principal d’une série de rendez-vous périodiques.")]
    Rendezvouspériodique = 4251,
    
    [EnumMember()]
    [OptionSetMetadata("Liste marketing", Index=77, Lcid=1036, Description="Groupe de clients existants ou potentiels, créé dans le cadre d\'une campagne mark" +
        "eting ou à autres visées commerciales.")]
    Listemarketing = 4300,
    
    [EnumMember()]
    [OptionSetMetadata("Campagne", Index=48, Lcid=1036, Description="Conteneur pour les activités et réponses de campagnes, la documentation commercia" +
        "le, les produits et les listes permettant de créer, planifier, exécuter et suivr" +
        "e les résultats d\'une campagne marketing spécifique tout au long de son déroulem" +
        "ent.")]
    Campagne = 4400,
    
    [EnumMember()]
    [OptionSetMetadata("Activité de campagne", Index=59, Lcid=1036, Description="Tâche effectuée, ou à effectuer, par l\'utilisateur pour la planification ou l\'exé" +
        "cution d\'une campagne.")]
    Activitédecampagne = 4402,
    
    [EnumMember()]
    [OptionSetMetadata("Session de traitement", Index=38, Lcid=1036, Description="Informations générées à l’exécution d’un dialogue. À chaque fois que vous exécute" +
        "z un dialogue, une session de dialogue est créée.")]
    Sessiondetraitement = 4710,
    
    [EnumMember()]
    [OptionSetMetadata("Règle de profil d\'accès au canal", Index=41, Lcid=1036, Description="Définit les règles d\'association automatique des profils d\'accès au canal à des e" +
        "nregistrements de partie externe. Utilisation interne uniquement.")]
    Règledeprofildaccèsaucanal = 9400,
    
    [EnumMember()]
    [OptionSetMetadata("Objectif", Index=22, Lcid=1036, Description="Objectif cible d’un utilisateur ou d’une équipe pour une période définie.")]
    Objectif = 9600,
    
    [EnumMember()]
    [OptionSetMetadata("Droit", Index=57, Lcid=1036, Description="Définit le montant et le type de support qu\'un client doit recevoir.")]
    Droit = 9700,
    
    [EnumMember()]
    [OptionSetMetadata("Canal d\'octroi du droit", Index=5, Lcid=1036, Description="Définit le montant et le type de support d\'un canal.")]
    Canaldoctroidudroit = 9701,
    
    [EnumMember()]
    [OptionSetMetadata("Canal de modèle de droit", Index=32, Lcid=1036, Description="Contient les conditions prédéfinies de support technique d\'un canal pour créer le" +
        "s droits pour les clients.")]
    Canaldemodèlededroit = 9703,
    
    [EnumMember()]
    [OptionSetMetadata("Enregistrement de la Base de connaissances", Index=29, Lcid=1036, Description="Métadonnées des articles de la Base de connaissances associés aux entités Microso" +
        "ft Dynamics 365.")]
    EnregistrementdelaBasedeconnaissances = 9930,
    
    [EnumMember()]
    [OptionSetMetadata("Article de la Base de connaissances", Index=43, Lcid=1036, Description="Connaissances organisationnelles destinées à un usage interne et externe.")]
    ArticledelaBasedeconnaissances = 9953,
    
    [EnumMember()]
    [OptionSetMetadata("Actif client", Index=44, Lcid=1036, Description="Spécifiez l\'actif du client.")]
    Actifclient = 10158,
    
    [EnumMember()]
    [OptionSetMetadata("Alerte IoT", Index=34, Lcid=1036, Description="")]
    AlerteIoT = 10172,
    
    [EnumMember()]
    [OptionSetMetadata("Appareil IoT", Index=72, Lcid=1036, Description="Représente un appareil connecté qui peut être inscrit auprès d\'un fournisseur IoT" +
        ".")]
    AppareilIoT = 10173,
    
    [EnumMember()]
    [OptionSetMetadata("Catégorie d\'appareils IoT", Index=0, Lcid=1036, Description="Permet de classer les appareils IoT.")]
    CatégoriedappareilsIoT = 10174,
    
    [EnumMember()]
    [OptionSetMetadata("Commande de l\'appareil IoT", Index=67, Lcid=1036, Description="Représente un message sortant vers un appareil connecté à un fournisseur IoT.")]
    CommandedelappareilIoT = 10175,
    
    [EnumMember()]
    [OptionSetMetadata("Historique des inscriptions des appareils IoT", Index=18, Lcid=1036, Description="Effectue le suivi des activités d\'inscription sur un appareil IoT.")]
    HistoriquedesinscriptionsdesappareilsIoT = 10179,
    
    [EnumMember()]
    [OptionSetMetadata("Séquence", Index=20, Lcid=1036, Description="")]
    Séquence = 10298,
    
    [EnumMember()]
    [OptionSetMetadata("Cible de la séquence", Index=40, Lcid=1036, Description="")]
    Cibledelaséquence = 10300,
    
    [EnumMember()]
    [OptionSetMetadata("Règle d’attribution", Index=60, Lcid=1036, Description="Définit les critères en fonction des entités acheminées vers les utilisateurs ou " +
        "l’équipe des ventes")]
    Règledattribution = 10306,
    
    [EnumMember()]
    [OptionSetMetadata("Carte d’attribution", Index=14, Lcid=1036, Description="")]
    Cartedattribution = 10309,
    
    [EnumMember()]
    [OptionSetMetadata("Suggestion", Index=36, Lcid=1036, Description="")]
    Suggestion = 10316,
    
    [EnumMember()]
    [OptionSetMetadata("Album du profil", Index=26, Lcid=1036, Description="Contient des images de profil utilisateur stockées sous forme de pièces jointes e" +
        "t affichées dans des publications.")]
    Albumduprofil = 10337,
    
    [EnumMember()]
    [OptionSetMetadata("Alerte Customer Voice", Index=63, Lcid=1036, Description="")]
    AlerteCustomerVoice = 10342,
    
    [EnumMember()]
    [OptionSetMetadata("Invitation à l\'enquête Customer Voice", Index=37, Lcid=1036, Description="Activité qui assure le suivi d\'une invitation à une enquête envoyée à une personn" +
        "e.")]
    InvitationàlenquêteCustomerVoice = 10352,
    
    [EnumMember()]
    [OptionSetMetadata("Réponse à l\'enquête Customer Voice", Index=45, Lcid=1036, Description="Réponse à une enquête.")]
    RéponseàlenquêteCustomerVoice = 10354,
    
    [EnumMember()]
    [OptionSetMetadata("Conversation en cours (déconseillé)", Index=52, Lcid=1036, Description="Suit les interactions entre les agents et le client")]
    Conversationencoursdéconseillé = 10393,
    
    [EnumMember()]
    [OptionSetMetadata("Conversation", Index=3, Lcid=1036, Description="Suit l’interaction entre les agents et le client")]
    Conversation = 10403,
    
    [EnumMember()]
    [OptionSetMetadata("Session", Index=16, Lcid=1036, Description="Session d’interaction avec un client")]
    Session = 10420,
    
    [EnumMember()]
    [OptionSetMetadata("Alerte de réservation", Index=27, Lcid=1036, Description="Les alertes qui notifient les utilisateurs du tableau de planification des problè" +
        "mes de réservation ou des informations relatives à celles-ci.")]
    Alertederéservation = 10561,
    
    [EnumMember()]
    [OptionSetMetadata("Statut d\'alerte de réservation", Index=23, Lcid=1036, Description="Le statut d\'une alerte de réservation.")]
    Statutdalertederéservation = 10562,
    
    [EnumMember()]
    [OptionSetMetadata("Règle de réservation", Index=15, Lcid=1036, Description="Spécifiez les règles personnalisées à faire valider par le système avant de sauve" +
        "garder un enregistrement de réservation.")]
    Règlederéservation = 10564,
    
    [EnumMember()]
    [OptionSetMetadata("Secteur de vente des ressources", Index=24, Lcid=1036, Description="Permet de spécifier pour quel secteur une ressource peut fournir des services")]
    Secteurdeventedesressources = 10574,
    
    [EnumMember()]
    [OptionSetMetadata("Paramètre du planificateur de l\'utilisateur du système", Index=25, Lcid=1036, Description="Stocke les paramètres spécifiques à l\'utilisateur pour le tableau de planificatio" +
        "n.")]
    Paramètreduplanificateurdelutilisateurdusystème = 10577,
    
    [EnumMember()]
    [OptionSetMetadata("Préférence d’exécution", Index=50, Lcid=1036, Description="Spécifiez les groupes d\'heures consistant en plusieurs fenêtres horaires à utilis" +
        "er pour la planification, par exemple.")]
    Préférencedexécution = 10578,
    
    [EnumMember()]
    [OptionSetMetadata("Détail du groupe d\'heures", Index=74, Lcid=1036, Description="Spécifiez les fenêtres horaires individuelles sous un groupe d\'heures.")]
    Détaildugroupedheures = 10579,
    
    [EnumMember()]
    [OptionSetMetadata("Message Espace Client", Index=64, Lcid=1036, Description="")]
    MessageEspaceClient = 10659,
    
    [EnumMember()]
    [OptionSetMetadata("Suggestion Principal Object Access", Index=6, Lcid=1036, Description="")]
    SuggestionPrincipalObjectAccess = 10859,
    
    [EnumMember()]
    [OptionSetMetadata("Prêts", Index=55, Lcid=1036, Description="")]
    Prêts = 10950,
    
    [EnumMember()]
    [OptionSetMetadata("Transcription Copilot", Index=28, Lcid=1036, Description="")]
    TranscriptionCopilot = 11116,
    
    [EnumMember()]
    [OptionSetMetadata("Dossier Client", Index=1, Lcid=1036, Description="")]
    DossierClient = 11226,
    
    [EnumMember()]
    [OptionSetMetadata("Données Personnelles", Index=13, Lcid=1036, Description="")]
    DonnéesPersonnelles = 11231,
    
    [EnumMember()]
    [OptionSetMetadata("Condition Commerciale", Index=4, Lcid=1036, Description="")]
    ConditionCommerciale = 11235,
    
    [EnumMember()]
    [OptionSetMetadata("Tranche Commerciale", Index=54, Lcid=1036, Description="")]
    TrancheCommerciale = 11270,
    
    [EnumMember()]
    [OptionSetMetadata("Invitation", Index=8, Lcid=1036, Description="Envoyez les invitations aux contacts ou aux adresses e-mail existants et affectez" +
        "-les à des rôles Web lors de leur utilisation.")]
    Invitation = 11296,
    
    [EnumMember()]
    [OptionSetMetadata("Utilisation d’invitation", Index=69, Lcid=1036, Description="Contient les informations concernant l’utilisation d’une invitation.")]
    Utilisationdinvitation = 11297,
    
    [EnumMember()]
    [OptionSetMetadata("Règle de transition de l’état de publication", Index=71, Lcid=1036, Description="")]
    Règledetransitiondelétatdepublication = 11316,
    
    [EnumMember()]
    [OptionSetMetadata("Raccourci", Index=76, Lcid=1036, Description="")]
    Raccourci = 11318,
    
    [EnumMember()]
    [OptionSetMetadata("Site Web", Index=42, Lcid=1036, Description="Portail Web")]
    SiteWeb = 11330,
}

[DataContract()]
public enum Connection_Record2ObjectTypeCode {
    
    [EnumMember()]
    [OptionSetMetadata("Compte", Index=35, Lcid=1036, Description="Entité commerciale qui représente un client ou un prospect. Société facturée dans" +
        " les transactions professionnelles.")]
    Compte = 1,
    
    [EnumMember()]
    [OptionSetMetadata("Individu", Index=17, Lcid=1036, Description="Personne liée à une division, telle qu\'un client, un fournisseur ou un collègue.")]
    Individu = 2,
    
    [EnumMember()]
    [OptionSetMetadata("Opportunité", Index=42, Lcid=1036, Description="Événement potentiellement générateur de revenus (ou vente à un compte) qui doit ê" +
        "tre suivi jusqu\'à sa conclusion via un processus de vente.")]
    Opportunité = 3,
    
    [EnumMember()]
    [OptionSetMetadata("Prospect", Index=21, Lcid=1036, Description="Prospect ou opportunité commerciale potentielle. Les prospects sont convertis en " +
        "comptes, contacts ou opportunités lorsqu\'ils sont « inclus ». Dans le cas contra" +
        "ire, ils sont supprimés ou archivés.")]
    Prospect = 4,
    
    [EnumMember()]
    [OptionSetMetadata("Utilisateur", Index=0, Lcid=1036, Description="Personne ayant accès au système Microsoft CRM et qui possède des objets dans la b" +
        "ase de données Microsoft CRM.")]
    Utilisateur = 8,
    
    [EnumMember()]
    [OptionSetMetadata("Équipe", Index=61, Lcid=1036, Description=@"Groupe d’utilisateurs système qui collabore de façon régulière. Les équipes peuvent être utilisées pour simplifier le partage des enregistrements et fournir aux membres de l’équipe un accès commun aux données de l’organisation lorsque ceux-ci appartiennent à des divisions différentes.")]
    Équipe = 9,
    
    [EnumMember()]
    [OptionSetMetadata("Poste", Index=67, Lcid=1036, Description="Position d\'un utilisateur dans la hiérarchie")]
    Poste = 50,
    
    [EnumMember()]
    [OptionSetMetadata("Profil social", Index=28, Lcid=1036, Description="Cette entité permet de stocker les informations de profil social du compte et des" +
        " contacts associés sur différents canaux sociaux.")]
    Profilsocial = 99,
    
    [EnumMember()]
    [OptionSetMetadata("Demande", Index=22, Lcid=1036, Description="Incident de requête de service associé à un contrat.")]
    Demande = 112,
    
    [EnumMember()]
    [OptionSetMetadata("Concurrent", Index=46, Lcid=1036, Description="Entreprise concurrente pour la vente, représentée par un prospect ou une opportun" +
        "ité.")]
    Concurrent = 123,
    
    [EnumMember()]
    [OptionSetMetadata("Contrat (Standard)", Index=76, Lcid=1036, Description="Accord sur la fourniture d\'un service clientèle définie pour un nombre d\'incident" +
        "s ou pour une durée spécifique.")]
    ContratStandard = 1010,
    
    [EnumMember()]
    [OptionSetMetadata("Tarifs", Index=57, Lcid=1036, Description="Entité qui définit les niveaux de tarification.")]
    Tarifs = 1022,
    
    [EnumMember()]
    [OptionSetMetadata("Produit", Index=49, Lcid=1036, Description="Informations sur les produits et leur tarification.")]
    Produit = 1024,
    
    [EnumMember()]
    [OptionSetMetadata("Devis", Index=15, Lcid=1036, Description="Offre formelle de produits et/ou de services, définie en fonction de prix spécifi" +
        "ques et de modalités de paiement correspondantes, envoyée à un prospect.")]
    Devis = 1084,
    
    [EnumMember()]
    [OptionSetMetadata("Commande", Index=29, Lcid=1036, Description="Devis ayant été accepté.")]
    Commande = 1088,
    
    [EnumMember()]
    [OptionSetMetadata("Facture", Index=44, Lcid=1036, Description="Commande qui a été facturée.")]
    Facture = 1090,
    
    [EnumMember()]
    [OptionSetMetadata("Secteur de vente", Index=45, Lcid=1036, Description="Le secteur de vente représente les régions commerciales.")]
    Secteurdevente = 2013,
    
    [EnumMember()]
    [OptionSetMetadata("Installation/équipement", Index=14, Lcid=1036, Description="Ressource pouvant faire l\'objet d\'une planification.")]
    Installationéquipement = 4000,
    
    [EnumMember()]
    [OptionSetMetadata("Groupe de planification", Index=55, Lcid=1036, Description="Groupe de ressources ou équipe dont les membres peuvent être planifiés pour un se" +
        "rvice.")]
    Groupedeplanification = 4005,
    
    [EnumMember()]
    [OptionSetMetadata("Groupe de ressources", Index=8, Lcid=1036, Description="Groupe ou ensemble de personnes, équipement et installation pouvant faire l\'objet" +
        " d\'une planification.")]
    Groupederessources = 4007,
    
    [EnumMember()]
    [OptionSetMetadata("Activité", Index=75, Lcid=1036, Description="Tâche effectuée ou à effectuer par un utilisateur. Une activité est une action po" +
        "ur laquelle on peut placer une entrée dans le calendrier.")]
    Activité = 4200,
    
    [EnumMember()]
    [OptionSetMetadata("Rendez-vous", Index=60, Lcid=1036, Description="Engagement représentant un intervalle de temps avec heures de début/fin et durée." +
        "")]
    Rendezvous = 4201,
    
    [EnumMember()]
    [OptionSetMetadata("Courrier électronique", Index=32, Lcid=1036, Description="Activité effectuée via des protocoles de courrier électronique.")]
    Courrierélectronique = 4202,
    
    [EnumMember()]
    [OptionSetMetadata("Télécopie", Index=58, Lcid=1036, Description="Activité qui vérifie le résultat d\'un appel et le nombre de pages d\'une télécopie" +
        ", et qui stocke éventuellement la copie électronique du document.")]
    Télécopie = 4204,
    
    [EnumMember()]
    [OptionSetMetadata("Lettre", Index=4, Lcid=1036, Description="Activité qui assure le suivi de la livraison d\'une lettre. L\'activité peut conten" +
        "ir la copie électronique de la lettre.")]
    Lettre = 4207,
    
    [EnumMember()]
    [OptionSetMetadata("Appel téléphonique", Index=38, Lcid=1036, Description="Activité de suivi d\'un appel téléphonique.")]
    Appeltéléphonique = 4210,
    
    [EnumMember()]
    [OptionSetMetadata("Tâche", Index=5, Lcid=1036, Description="Activité générique représentant le travail à effectuer.")]
    Tâche = 4212,
    
    [EnumMember()]
    [OptionSetMetadata("Activité de service", Index=63, Lcid=1036, Description="Activité de l\'organisation destinée à satisfaire les besoins de son client. Chaqu" +
        "e activité de service comprend la date, l\'heure, la durée et les ressources requ" +
        "ises.")]
    Activitédeservice = 4214,
    
    [EnumMember()]
    [OptionSetMetadata("Activité sociale", Index=50, Lcid=1036, Description="Utilisation interne uniquement.")]
    Activitésociale = 4216,
    
    [EnumMember()]
    [OptionSetMetadata("Rendez-vous périodique", Index=40, Lcid=1036, Description="Rendez-vous principal d’une série de rendez-vous périodiques.")]
    Rendezvouspériodique = 4251,
    
    [EnumMember()]
    [OptionSetMetadata("Liste marketing", Index=11, Lcid=1036, Description="Groupe de clients existants ou potentiels, créé dans le cadre d\'une campagne mark" +
        "eting ou à autres visées commerciales.")]
    Listemarketing = 4300,
    
    [EnumMember()]
    [OptionSetMetadata("Campagne", Index=12, Lcid=1036, Description="Conteneur pour les activités et réponses de campagnes, la documentation commercia" +
        "le, les produits et les listes permettant de créer, planifier, exécuter et suivr" +
        "e les résultats d\'une campagne marketing spécifique tout au long de son déroulem" +
        "ent.")]
    Campagne = 4400,
    
    [EnumMember()]
    [OptionSetMetadata("Activité de campagne", Index=16, Lcid=1036, Description="Tâche effectuée, ou à effectuer, par l\'utilisateur pour la planification ou l\'exé" +
        "cution d\'une campagne.")]
    Activitédecampagne = 4402,
    
    [EnumMember()]
    [OptionSetMetadata("Session de traitement", Index=26, Lcid=1036, Description="Informations générées à l’exécution d’un dialogue. À chaque fois que vous exécute" +
        "z un dialogue, une session de dialogue est créée.")]
    Sessiondetraitement = 4710,
    
    [EnumMember()]
    [OptionSetMetadata("Règle de profil d\'accès au canal", Index=2, Lcid=1036, Description="Définit les règles d\'association automatique des profils d\'accès au canal à des e" +
        "nregistrements de partie externe. Utilisation interne uniquement.")]
    Règledeprofildaccèsaucanal = 9400,
    
    [EnumMember()]
    [OptionSetMetadata("Objectif", Index=3, Lcid=1036, Description="Objectif cible d’un utilisateur ou d’une équipe pour une période définie.")]
    Objectif = 9600,
    
    [EnumMember()]
    [OptionSetMetadata("Droit", Index=9, Lcid=1036, Description="Définit le montant et le type de support qu\'un client doit recevoir.")]
    Droit = 9700,
    
    [EnumMember()]
    [OptionSetMetadata("Canal d\'octroi du droit", Index=78, Lcid=1036, Description="Définit le montant et le type de support d\'un canal.")]
    Canaldoctroidudroit = 9701,
    
    [EnumMember()]
    [OptionSetMetadata("Canal de modèle de droit", Index=27, Lcid=1036, Description="Contient les conditions prédéfinies de support technique d\'un canal pour créer le" +
        "s droits pour les clients.")]
    Canaldemodèlededroit = 9703,
    
    [EnumMember()]
    [OptionSetMetadata("Enregistrement de la Base de connaissances", Index=20, Lcid=1036, Description="Métadonnées des articles de la Base de connaissances associés aux entités Microso" +
        "ft Dynamics 365.")]
    EnregistrementdelaBasedeconnaissances = 9930,
    
    [EnumMember()]
    [OptionSetMetadata("Article de la Base de connaissances", Index=74, Lcid=1036, Description="Connaissances organisationnelles destinées à un usage interne et externe.")]
    ArticledelaBasedeconnaissances = 9953,
    
    [EnumMember()]
    [OptionSetMetadata("Actif client", Index=31, Lcid=1036, Description="Spécifiez l\'actif du client.")]
    Actifclient = 10158,
    
    [EnumMember()]
    [OptionSetMetadata("Alerte IoT", Index=7, Lcid=1036, Description="")]
    AlerteIoT = 10172,
    
    [EnumMember()]
    [OptionSetMetadata("Appareil IoT", Index=25, Lcid=1036, Description="Représente un appareil connecté qui peut être inscrit auprès d\'un fournisseur IoT" +
        ".")]
    AppareilIoT = 10173,
    
    [EnumMember()]
    [OptionSetMetadata("Catégorie d\'appareils IoT", Index=56, Lcid=1036, Description="Permet de classer les appareils IoT.")]
    CatégoriedappareilsIoT = 10174,
    
    [EnumMember()]
    [OptionSetMetadata("Commande de l\'appareil IoT", Index=71, Lcid=1036, Description="Représente un message sortant vers un appareil connecté à un fournisseur IoT.")]
    CommandedelappareilIoT = 10175,
    
    [EnumMember()]
    [OptionSetMetadata("Historique des inscriptions des appareils IoT", Index=59, Lcid=1036, Description="Effectue le suivi des activités d\'inscription sur un appareil IoT.")]
    HistoriquedesinscriptionsdesappareilsIoT = 10179,
    
    [EnumMember()]
    [OptionSetMetadata("Séquence", Index=6, Lcid=1036, Description="")]
    Séquence = 10298,
    
    [EnumMember()]
    [OptionSetMetadata("Cible de la séquence", Index=34, Lcid=1036, Description="")]
    Cibledelaséquence = 10300,
    
    [EnumMember()]
    [OptionSetMetadata("Règle d’attribution", Index=33, Lcid=1036, Description="Définit les critères en fonction des entités acheminées vers les utilisateurs ou " +
        "l’équipe des ventes")]
    Règledattribution = 10306,
    
    [EnumMember()]
    [OptionSetMetadata("Carte d’attribution", Index=18, Lcid=1036, Description="")]
    Cartedattribution = 10309,
    
    [EnumMember()]
    [OptionSetMetadata("Suggestion", Index=30, Lcid=1036, Description="")]
    Suggestion = 10316,
    
    [EnumMember()]
    [OptionSetMetadata("Album du profil", Index=1, Lcid=1036, Description="Contient des images de profil utilisateur stockées sous forme de pièces jointes e" +
        "t affichées dans des publications.")]
    Albumduprofil = 10337,
    
    [EnumMember()]
    [OptionSetMetadata("Alerte Customer Voice", Index=54, Lcid=1036, Description="")]
    AlerteCustomerVoice = 10342,
    
    [EnumMember()]
    [OptionSetMetadata("Invitation à l\'enquête Customer Voice", Index=10, Lcid=1036, Description="Activité qui assure le suivi d\'une invitation à une enquête envoyée à une personn" +
        "e.")]
    InvitationàlenquêteCustomerVoice = 10352,
    
    [EnumMember()]
    [OptionSetMetadata("Réponse à l\'enquête Customer Voice", Index=47, Lcid=1036, Description="Réponse à une enquête.")]
    RéponseàlenquêteCustomerVoice = 10354,
    
    [EnumMember()]
    [OptionSetMetadata("Conversation en cours (déconseillé)", Index=73, Lcid=1036, Description="Suit les interactions entre les agents et le client")]
    Conversationencoursdéconseillé = 10393,
    
    [EnumMember()]
    [OptionSetMetadata("Conversation", Index=36, Lcid=1036, Description="Suit l’interaction entre les agents et le client")]
    Conversation = 10403,
    
    [EnumMember()]
    [OptionSetMetadata("Session", Index=53, Lcid=1036, Description="Session d’interaction avec un client")]
    Session = 10420,
    
    [EnumMember()]
    [OptionSetMetadata("Alerte de réservation", Index=66, Lcid=1036, Description="Les alertes qui notifient les utilisateurs du tableau de planification des problè" +
        "mes de réservation ou des informations relatives à celles-ci.")]
    Alertederéservation = 10561,
    
    [EnumMember()]
    [OptionSetMetadata("Statut d\'alerte de réservation", Index=43, Lcid=1036, Description="Le statut d\'une alerte de réservation.")]
    Statutdalertederéservation = 10562,
    
    [EnumMember()]
    [OptionSetMetadata("Règle de réservation", Index=72, Lcid=1036, Description="Spécifiez les règles personnalisées à faire valider par le système avant de sauve" +
        "garder un enregistrement de réservation.")]
    Règlederéservation = 10564,
    
    [EnumMember()]
    [OptionSetMetadata("Secteur de vente des ressources", Index=62, Lcid=1036, Description="Permet de spécifier pour quel secteur une ressource peut fournir des services")]
    Secteurdeventedesressources = 10574,
    
    [EnumMember()]
    [OptionSetMetadata("Paramètre du planificateur de l\'utilisateur du système", Index=68, Lcid=1036, Description="Stocke les paramètres spécifiques à l\'utilisateur pour le tableau de planificatio" +
        "n.")]
    Paramètreduplanificateurdelutilisateurdusystème = 10577,
    
    [EnumMember()]
    [OptionSetMetadata("Préférence d’exécution", Index=69, Lcid=1036, Description="Spécifiez les groupes d\'heures consistant en plusieurs fenêtres horaires à utilis" +
        "er pour la planification, par exemple.")]
    Préférencedexécution = 10578,
    
    [EnumMember()]
    [OptionSetMetadata("Détail du groupe d\'heures", Index=23, Lcid=1036, Description="Spécifiez les fenêtres horaires individuelles sous un groupe d\'heures.")]
    Détaildugroupedheures = 10579,
    
    [EnumMember()]
    [OptionSetMetadata("Message Espace Client", Index=37, Lcid=1036, Description="")]
    MessageEspaceClient = 10659,
    
    [EnumMember()]
    [OptionSetMetadata("Suggestion Principal Object Access", Index=41, Lcid=1036, Description="")]
    SuggestionPrincipalObjectAccess = 10859,
    
    [EnumMember()]
    [OptionSetMetadata("Prêts", Index=48, Lcid=1036, Description="")]
    Prêts = 10950,
    
    [EnumMember()]
    [OptionSetMetadata("Transcription Copilot", Index=24, Lcid=1036, Description="")]
    TranscriptionCopilot = 11116,
    
    [EnumMember()]
    [OptionSetMetadata("Dossier Client", Index=77, Lcid=1036, Description="")]
    DossierClient = 11226,
    
    [EnumMember()]
    [OptionSetMetadata("Données Personnelles", Index=70, Lcid=1036, Description="")]
    DonnéesPersonnelles = 11231,
    
    [EnumMember()]
    [OptionSetMetadata("Condition Commerciale", Index=65, Lcid=1036, Description="")]
    ConditionCommerciale = 11235,
    
    [EnumMember()]
    [OptionSetMetadata("Tranche Commerciale", Index=19, Lcid=1036, Description="")]
    TrancheCommerciale = 11270,
    
    [EnumMember()]
    [OptionSetMetadata("Invitation", Index=64, Lcid=1036, Description="Envoyez les invitations aux contacts ou aux adresses e-mail existants et affectez" +
        "-les à des rôles Web lors de leur utilisation.")]
    Invitation = 11296,
    
    [EnumMember()]
    [OptionSetMetadata("Utilisation d’invitation", Index=39, Lcid=1036, Description="Contient les informations concernant l’utilisation d’une invitation.")]
    Utilisationdinvitation = 11297,
    
    [EnumMember()]
    [OptionSetMetadata("Règle de transition de l’état de publication", Index=51, Lcid=1036, Description="")]
    Règledetransitiondelétatdepublication = 11316,
    
    [EnumMember()]
    [OptionSetMetadata("Raccourci", Index=52, Lcid=1036, Description="")]
    Raccourci = 11318,
    
    [EnumMember()]
    [OptionSetMetadata("Site Web", Index=13, Lcid=1036, Description="Portail Web")]
    SiteWeb = 11330,
}

[DataContract()]
public enum Connection_StatusCode {
    
    [EnumMember()]
    [OptionSetMetadata("Actif", Index=0, Lcid=1036)]
    Actif = 1,
    
    [EnumMember()]
    [OptionSetMetadata("Inactif", Index=1, Lcid=1036)]
    Inactif = 2,
}
