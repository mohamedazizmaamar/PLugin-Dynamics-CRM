//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using DG.XrmContext;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;




/// <summary>
/// <para>Contains information about the settable variable: its type, default value, and etc.</para>
/// <para>Display Name: Environment Variable Definition</para>
/// </summary>
[EntityLogicalName("environmentvariabledefinition")]
[DebuggerDisplay("{DebuggerDisplay,nq}")]
[DataContract()]
public partial class EnvironmentVariableDefinition : ExtendedEntity<EnvironmentVariableDefinitionState, EnvironmentVariableDefinition_statuscode> {
    
    public const string EntityLogicalName = "environmentvariabledefinition";
    
    public const int EntityTypeCode = 380;
    
    public EnvironmentVariableDefinition() : 
            base(EntityLogicalName) {
    }
    
    public EnvironmentVariableDefinition(Guid Id) : 
            base(EntityLogicalName, Id) {
    }
    
    private string DebuggerDisplay {
        get {
            return GetDebuggerDisplay("schemaname");
        }
    }
    
    [AttributeLogicalName("environmentvariabledefinitionid")]
    public override Guid Id {
        get {
            return base.Id;
        }
        set {
            SetId("environmentvariabledefinitionid", value);
        }
    }
    
    /// <summary>
    /// <para>Unique identifier for entity instances</para>
    /// <para>Display Name: Environment Variable Definition</para>
    /// </summary>
    [AttributeLogicalName("environmentvariabledefinitionid")]
    [DisplayName("Environment Variable Definition")]
    public Guid? EnvironmentVariableDefinitionId {
        get {
            return GetAttributeValue<Guid?>("environmentvariabledefinitionid");
        }
        set {
            SetId("environmentvariabledefinitionid", value);
        }
    }
    
    /// <summary>
    /// <para>Display Name: API Id</para>
    /// </summary>
    [AttributeLogicalName("apiid")]
    [DisplayName("API Id")]
    [MaxLength(150)]
    public string ApiId {
        get {
            return GetAttributeValue<string>("apiid");
        }
        set {
            SetAttributeValue("apiid", value);
        }
    }
    
    /// <summary>
    /// <para>For internal use only.</para>
    /// <para>Display Name: Component State</para>
    /// </summary>
    [AttributeLogicalName("componentstate")]
    [DisplayName("Component State")]
    public componentstate? ComponentState {
        get {
            return GetOptionSetValue<componentstate>("componentstate");
        }
    }
    
    /// <summary>
    /// <para>Unique identifier for Connection Reference associated with Environment Variable Definition.</para>
    /// <para>Display Name: Connection Reference</para>
    /// </summary>
    [AttributeLogicalName("connectionreferenceid")]
    [DisplayName("Connection Reference")]
    public EntityReference ConnectionReferenceId {
        get {
            return GetAttributeValue<EntityReference>("connectionreferenceid");
        }
        set {
            SetAttributeValue("connectionreferenceid", value);
        }
    }
    
    /// <summary>
    /// <para>Unique identifier of the user who created the record.</para>
    /// <para>Display Name: Created By</para>
    /// </summary>
    [AttributeLogicalName("createdby")]
    [DisplayName("Created By")]
    public EntityReference CreatedBy {
        get {
            return GetAttributeValue<EntityReference>("createdby");
        }
    }
    
    /// <summary>
    /// <para>Date and time when the record was created.</para>
    /// <para>Display Name: Created On</para>
    /// </summary>
    [AttributeLogicalName("createdon")]
    [DisplayName("Created On")]
    public DateTime? CreatedOn {
        get {
            return GetAttributeValue<DateTime?>("createdon");
        }
    }
    
    /// <summary>
    /// <para>Unique identifier of the delegate user who created the record.</para>
    /// <para>Display Name: Created By (Delegate)</para>
    /// </summary>
    [AttributeLogicalName("createdonbehalfby")]
    [DisplayName("Created By (Delegate)")]
    public EntityReference CreatedOnBehalfBy {
        get {
            return GetAttributeValue<EntityReference>("createdonbehalfby");
        }
    }
    
    /// <summary>
    /// <para>Default variable value to be used if no associated EnvironmentVariableValue entities exist.</para>
    /// <para>Display Name: Default Value</para>
    /// </summary>
    [AttributeLogicalName("defaultvalue")]
    [DisplayName("Default Value")]
    public string DefaultValue {
        get {
            return GetAttributeValue<string>("defaultvalue");
        }
        set {
            SetAttributeValue("defaultvalue", value);
        }
    }
    
    /// <summary>
    /// <para>Description of the variable definition.</para>
    /// <para>Display Name: Description</para>
    /// </summary>
    [AttributeLogicalName("description")]
    [DisplayName("Description")]
    public string Description {
        get {
            return GetAttributeValue<string>("description");
        }
        set {
            SetAttributeValue("description", value);
        }
    }
    
    /// <summary>
    /// <para>Display Name of the variable definition.</para>
    /// <para>Display Name: Display Name</para>
    /// </summary>
    [AttributeLogicalName("displayname")]
    [DisplayName("Display Name")]
    [MaxLength(100)]
    public string DisplayName {
        get {
            return GetAttributeValue<string>("displayname");
        }
        set {
            SetAttributeValue("displayname", value);
        }
    }
    
    /// <summary>
    /// <para>For internal use only.</para>
    /// </summary>
    [AttributeLogicalName("environmentvariabledefinitionidunique")]
    public Guid? EnvironmentVariableDefinitionIdUnique {
        get {
            return GetAttributeValue<Guid?>("environmentvariabledefinitionidunique");
        }
    }
    
    /// <summary>
    /// <para>For internal use only.</para>
    /// <para>Display Name: Hint</para>
    /// </summary>
    [AttributeLogicalName("hint")]
    [DisplayName("Hint")]
    public string Hint {
        get {
            return GetAttributeValue<string>("hint");
        }
        set {
            SetAttributeValue("hint", value);
        }
    }
    
    /// <summary>
    /// <para>Sequence number of the import that created this record.</para>
    /// <para>Display Name: Import Sequence Number</para>
    /// </summary>
    [AttributeLogicalName("importsequencenumber")]
    [DisplayName("Import Sequence Number")]
    [Range(-2147483648, 2147483647)]
    public int? ImportSequenceNumber {
        get {
            return GetAttributeValue<int?>("importsequencenumber");
        }
        set {
            SetAttributeValue("importsequencenumber", value);
        }
    }
    
    /// <summary>
    /// <para>Version in which the form is introduced.</para>
    /// <para>Display Name: Introduced Version</para>
    /// </summary>
    [AttributeLogicalName("introducedversion")]
    [DisplayName("Introduced Version")]
    [MaxLength(48)]
    public string IntroducedVersion {
        get {
            return GetAttributeValue<string>("introducedversion");
        }
        set {
            SetAttributeValue("introducedversion", value);
        }
    }
    
    /// <summary>
    /// <para>Tells whether the component can be customized.</para>
    /// <para>Display Name: Customizable</para>
    /// </summary>
    [AttributeLogicalName("iscustomizable")]
    [DisplayName("Customizable")]
    public BooleanManagedProperty IsCustomizable {
        get {
            return GetAttributeValue<BooleanManagedProperty>("iscustomizable");
        }
        set {
            SetAttributeValue("iscustomizable", value);
        }
    }
    
    /// <summary>
    /// <para>Indicates whether the solution component is part of a managed solution.</para>
    /// <para>Display Name: Is Managed</para>
    /// </summary>
    [AttributeLogicalName("ismanaged")]
    [DisplayName("Is Managed")]
    public bool? IsManaged {
        get {
            return GetAttributeValue<bool?>("ismanaged");
        }
    }
    
    /// <summary>
    /// <para>For internal use only.</para>
    /// <para>Display Name: Is Required</para>
    /// </summary>
    [AttributeLogicalName("isrequired")]
    [DisplayName("Is Required")]
    public bool? IsRequired {
        get {
            return GetAttributeValue<bool?>("isrequired");
        }
        set {
            SetAttributeValue("isrequired", value);
        }
    }
    
    /// <summary>
    /// <para>Unique identifier of the user who modified the record.</para>
    /// <para>Display Name: Modified By</para>
    /// </summary>
    [AttributeLogicalName("modifiedby")]
    [DisplayName("Modified By")]
    public EntityReference ModifiedBy {
        get {
            return GetAttributeValue<EntityReference>("modifiedby");
        }
    }
    
    /// <summary>
    /// <para>Date and time when the record was modified.</para>
    /// <para>Display Name: Modified On</para>
    /// </summary>
    [AttributeLogicalName("modifiedon")]
    [DisplayName("Modified On")]
    public DateTime? ModifiedOn {
        get {
            return GetAttributeValue<DateTime?>("modifiedon");
        }
    }
    
    /// <summary>
    /// <para>Unique identifier of the delegate user who modified the record.</para>
    /// <para>Display Name: Modified By (Delegate)</para>
    /// </summary>
    [AttributeLogicalName("modifiedonbehalfby")]
    [DisplayName("Modified By (Delegate)")]
    public EntityReference ModifiedOnBehalfBy {
        get {
            return GetAttributeValue<EntityReference>("modifiedonbehalfby");
        }
    }
    
    /// <summary>
    /// <para>Date and time that the record was migrated.</para>
    /// <para>Display Name: Record Created On</para>
    /// </summary>
    [AttributeLogicalName("overriddencreatedon")]
    [DisplayName("Record Created On")]
    public DateTime? OverriddenCreatedOn {
        get {
            return GetAttributeValue<DateTime?>("overriddencreatedon");
        }
        set {
            SetAttributeValue("overriddencreatedon", value);
        }
    }
    
    /// <summary>
    /// <para>For internal use only.</para>
    /// <para>Display Name: Record Overwrite Time</para>
    /// </summary>
    [AttributeLogicalName("overwritetime")]
    [DisplayName("Record Overwrite Time")]
    public DateTime? OverwriteTime {
        get {
            return GetAttributeValue<DateTime?>("overwritetime");
        }
    }
    
    /// <summary>
    /// <para>Owner Id</para>
    /// <para>Display Name: Owner</para>
    /// </summary>
    [AttributeLogicalName("ownerid")]
    [DisplayName("Owner")]
    public EntityReference OwnerId {
        get {
            return GetAttributeValue<EntityReference>("ownerid");
        }
        set {
            SetAttributeValue("ownerid", value);
        }
    }
    
    /// <summary>
    /// <para>Unique identifier for the business unit that owns the record</para>
    /// <para>Display Name: Owning Business Unit</para>
    /// </summary>
    [AttributeLogicalName("owningbusinessunit")]
    [DisplayName("Owning Business Unit")]
    public EntityReference OwningBusinessUnit {
        get {
            return GetAttributeValue<EntityReference>("owningbusinessunit");
        }
    }
    
    /// <summary>
    /// <para>Unique identifier for the team that owns the record.</para>
    /// <para>Display Name: Owning Team</para>
    /// </summary>
    [AttributeLogicalName("owningteam")]
    [DisplayName("Owning Team")]
    public EntityReference OwningTeam {
        get {
            return GetAttributeValue<EntityReference>("owningteam");
        }
    }
    
    /// <summary>
    /// <para>Unique identifier for the user that owns the record.</para>
    /// <para>Display Name: Owning User</para>
    /// </summary>
    [AttributeLogicalName("owninguser")]
    [DisplayName("Owning User")]
    public EntityReference OwningUser {
        get {
            return GetAttributeValue<EntityReference>("owninguser");
        }
    }
    
    /// <summary>
    /// <para>Display Name: Parameter Key</para>
    /// </summary>
    [AttributeLogicalName("parameterkey")]
    [DisplayName("Parameter Key")]
    [MaxLength(150)]
    public string ParameterKey {
        get {
            return GetAttributeValue<string>("parameterkey");
        }
        set {
            SetAttributeValue("parameterkey", value);
        }
    }
    
    /// <summary>
    /// <para>Unique identifier for Environment Variable Definition associated with Environment Variable Definition.</para>
    /// <para>Display Name: Parent Definition</para>
    /// </summary>
    [AttributeLogicalName("parentdefinitionid")]
    [DisplayName("Parent Definition")]
    public EntityReference ParentDefinitionId {
        get {
            return GetAttributeValue<EntityReference>("parentdefinitionid");
        }
        set {
            SetAttributeValue("parentdefinitionid", value);
        }
    }
    
    /// <summary>
    /// <para>Unique entity name.</para>
    /// <para>Display Name: Schema Name</para>
    /// </summary>
    [AttributeLogicalName("schemaname")]
    [DisplayName("Schema Name")]
    [MaxLength(100)]
    public string PrimaryNameField {
        get {
            return GetAttributeValue<string>("schemaname");
        }
        set {
            SetAttributeValue("schemaname", value);
        }
    }
    
    /// <summary>
    /// <para>Unique entity name.</para>
    /// <para>Display Name: Schema Name</para>
    /// </summary>
    [AttributeLogicalName("schemaname")]
    [DisplayName("Schema Name")]
    [MaxLength(100)]
    public string SchemaName {
        get {
            return GetAttributeValue<string>("schemaname");
        }
        set {
            SetAttributeValue("schemaname", value);
        }
    }
    
    /// <summary>
    /// <para>Environment variable secret store.</para>
    /// <para>Display Name: SecretStore</para>
    /// </summary>
    [AttributeLogicalName("secretstore")]
    [DisplayName("SecretStore")]
    public EnvironmentVariableDefinition_SecretStore? SecretStore {
        get {
            return GetOptionSetValue<EnvironmentVariableDefinition_SecretStore>("secretstore");
        }
        set {
            SetOptionSetValue("secretstore", value);
        }
    }
    
    /// <summary>
    /// <para>Unique identifier of the associated solution.</para>
    /// <para>Display Name: Solution</para>
    /// </summary>
    [AttributeLogicalName("solutionid")]
    [DisplayName("Solution")]
    public Guid? SolutionId {
        get {
            return GetAttributeValue<Guid?>("solutionid");
        }
    }
    
    /// <summary>
    /// <para>For internal use only.</para>
    /// <para>Display Name: Time Zone Rule Version Number</para>
    /// </summary>
    [AttributeLogicalName("timezoneruleversionnumber")]
    [DisplayName("Time Zone Rule Version Number")]
    [Range(-1, 2147483647)]
    public int? TimeZoneRuleVersionNumber {
        get {
            return GetAttributeValue<int?>("timezoneruleversionnumber");
        }
        set {
            SetAttributeValue("timezoneruleversionnumber", value);
        }
    }
    
    /// <summary>
    /// <para>Environment variable value type.</para>
    /// <para>Display Name: Type</para>
    /// </summary>
    [AttributeLogicalName("type")]
    [DisplayName("Type")]
    public EnvironmentVariableDefinition_Type? Type {
        get {
            return GetOptionSetValue<EnvironmentVariableDefinition_Type>("type");
        }
        set {
            SetOptionSetValue("type", value);
        }
    }
    
    /// <summary>
    /// <para>Time zone code that was in use when the record was created.</para>
    /// <para>Display Name: UTC Conversion Time Zone Code</para>
    /// </summary>
    [AttributeLogicalName("utcconversiontimezonecode")]
    [DisplayName("UTC Conversion Time Zone Code")]
    [Range(-1, 2147483647)]
    public int? UTCConversionTimeZoneCode {
        get {
            return GetAttributeValue<int?>("utcconversiontimezonecode");
        }
        set {
            SetAttributeValue("utcconversiontimezonecode", value);
        }
    }
    
    /// <summary>
    /// <para>For internal use only.</para>
    /// <para>Display Name: Value Schema</para>
    /// </summary>
    [AttributeLogicalName("valueschema")]
    [DisplayName("Value Schema")]
    public string ValueSchema {
        get {
            return GetAttributeValue<string>("valueschema");
        }
        set {
            SetAttributeValue("valueschema", value);
        }
    }
    
    /// <summary>
    /// <para>Numéro de version</para>
    /// <para>Display Name: Numéro de version</para>
    /// </summary>
    [AttributeLogicalName("versionnumber")]
    [DisplayName("Numéro de version")]
    public long? VersionNumber {
        get {
            return GetAttributeValue<long?>("versionnumber");
        }
    }
    
    /// <summary>
    /// <para>Status of the Environment Variable Definition</para>
    /// <para>Display Name: Status</para>
    /// </summary>
    [AttributeLogicalName("statecode")]
    [DisplayName("Status")]
    public EnvironmentVariableDefinitionState? statecode {
        get {
            return GetOptionSetValue<EnvironmentVariableDefinitionState>("statecode");
        }
        set {
            SetOptionSetValue("statecode", value);
        }
    }
    
    /// <summary>
    /// <para>Reason for the status of the Environment Variable Definition</para>
    /// <para>Display Name: Status Reason</para>
    /// </summary>
    [AttributeLogicalName("statuscode")]
    [DisplayName("Status Reason")]
    public EnvironmentVariableDefinition_statuscode? statuscode {
        get {
            return GetOptionSetValue<EnvironmentVariableDefinition_statuscode>("statuscode");
        }
        set {
            SetOptionSetValue("statuscode", value);
        }
    }
    
    [RelationshipSchemaName("envdefinition_envdefinition", EntityRole.Referenced)]
    public IEnumerable<EnvironmentVariableDefinition> Referencedenvdefinition_envdefinition {
        get {
            return GetRelatedEntities<EnvironmentVariableDefinition>("envdefinition_envdefinition", EntityRole.Referenced);
        }
        set {
            SetRelatedEntities("envdefinition_envdefinition", EntityRole.Referenced, value);
        }
    }
    
    [AttributeLogicalName("parentdefinitionid")]
    [RelationshipSchemaName("envdefinition_envdefinition", EntityRole.Referencing)]
    public EnvironmentVariableDefinition Referencingenvdefinition_envdefinition {
        get {
            return GetRelatedEntity<EnvironmentVariableDefinition>("envdefinition_envdefinition", EntityRole.Referencing);
        }
        set {
            SetRelatedEntity("envdefinition_envdefinition", EntityRole.Referencing, value);
        }
    }
    
    [AttributeLogicalName("owningbusinessunit")]
    [RelationshipSchemaName("business_unit_environmentvariabledefinition")]
    public BusinessUnit business_unit_environmentvariabledefinition {
        get {
            return GetRelatedEntity<BusinessUnit>("business_unit_environmentvariabledefinition", null);
        }
        set {
            SetRelatedEntity("business_unit_environmentvariabledefinition", null, value);
        }
    }
    
    [RelationshipSchemaName("environmentvariabledefinition_environmentvariablevalue")]
    public IEnumerable<EnvironmentVariableValue> environmentvariabledefinition_environmentvariablevalue {
        get {
            return GetRelatedEntities<EnvironmentVariableValue>("environmentvariabledefinition_environmentvariablevalue", null);
        }
        set {
            SetRelatedEntities("environmentvariabledefinition_environmentvariablevalue", null, value);
        }
    }
    
    [AttributeLogicalName("createdby")]
    [RelationshipSchemaName("lk_environmentvariabledefinition_createdby")]
    public SystemUser lk_environmentvariabledefinition_createdby {
        get {
            return GetRelatedEntity<SystemUser>("lk_environmentvariabledefinition_createdby", null);
        }
        set {
            SetRelatedEntity("lk_environmentvariabledefinition_createdby", null, value);
        }
    }
    
    [AttributeLogicalName("createdonbehalfby")]
    [RelationshipSchemaName("lk_environmentvariabledefinition_createdonbehalfby")]
    public SystemUser lk_environmentvariabledefinition_createdonbehalfby {
        get {
            return GetRelatedEntity<SystemUser>("lk_environmentvariabledefinition_createdonbehalfby", null);
        }
        set {
            SetRelatedEntity("lk_environmentvariabledefinition_createdonbehalfby", null, value);
        }
    }
    
    [AttributeLogicalName("modifiedby")]
    [RelationshipSchemaName("lk_environmentvariabledefinition_modifiedby")]
    public SystemUser lk_environmentvariabledefinition_modifiedby {
        get {
            return GetRelatedEntity<SystemUser>("lk_environmentvariabledefinition_modifiedby", null);
        }
        set {
            SetRelatedEntity("lk_environmentvariabledefinition_modifiedby", null, value);
        }
    }
    
    [AttributeLogicalName("modifiedonbehalfby")]
    [RelationshipSchemaName("lk_environmentvariabledefinition_modifiedonbehalfby")]
    public SystemUser lk_environmentvariabledefinition_modifiedonbehalfby {
        get {
            return GetRelatedEntity<SystemUser>("lk_environmentvariabledefinition_modifiedonbehalfby", null);
        }
        set {
            SetRelatedEntity("lk_environmentvariabledefinition_modifiedonbehalfby", null, value);
        }
    }
    
    [AttributeLogicalName("owningteam")]
    [RelationshipSchemaName("team_environmentvariabledefinition")]
    public Team team_environmentvariabledefinition {
        get {
            return GetRelatedEntity<Team>("team_environmentvariabledefinition", null);
        }
        set {
            SetRelatedEntity("team_environmentvariabledefinition", null, value);
        }
    }
    
    [AttributeLogicalName("owninguser")]
    [RelationshipSchemaName("user_environmentvariabledefinition")]
    public SystemUser user_environmentvariabledefinition {
        get {
            return GetRelatedEntity<SystemUser>("user_environmentvariabledefinition", null);
        }
        set {
            SetRelatedEntity("user_environmentvariabledefinition", null, value);
        }
    }
    
    public static EnvironmentVariableDefinition Retrieve(IOrganizationService service, Guid id, params Expression<Func<EnvironmentVariableDefinition,object>>[] attrs) {
        return service.Retrieve(id, attrs);
    }
    
    /// <summary>
    /// <para>Retrieves the record using the alternate key called 'Environment Variable Definition Key'</para>
    /// </summary>
    public static EnvironmentVariableDefinition Retrieve_DefinitionKey(IOrganizationService service, string SchemaName, componentstate ComponentState, DateTime OverwriteTime, params Expression<Func<EnvironmentVariableDefinition,object>>[] attrs) {
        KeyAttributeCollection keys = new KeyAttributeCollection();
        keys.Add("schemaname", SchemaName);
        keys.Add("componentstate", ComponentState);
        keys.Add("overwritetime", OverwriteTime);
        return Retrieve_AltKey(service, keys, attrs);
    }
    
    /// <summary>
    /// <para>Set values for the alternate key called 'Environment Variable Definition Key'</para>
    /// </summary>
    public void AltKey_DefinitionKey(string SchemaName, componentstate ComponentState, DateTime OverwriteTime) {
        KeyAttributes.Clear();
        KeyAttributes.Add("schemaname", SchemaName);
        KeyAttributes.Add("componentstate", ComponentState);
        KeyAttributes.Add("overwritetime", OverwriteTime);
    }
}

[DataContract()]
public enum EnvironmentVariableDefinitionState {
    
    [EnumMember()]
    [OptionSetMetadata("Active", Index=0, Lcid=1036)]
    Active = 0,
    
    [EnumMember()]
    [OptionSetMetadata("Inactive", Index=1, Lcid=1036)]
    Inactive = 1,
}

[DataContract()]
public enum EnvironmentVariableDefinition_SecretStore {
    
    [EnumMember()]
    [OptionSetMetadata("Azure Key Vault", Index=0, Lcid=1036, Color="#0000ff")]
    AzureKeyVault = 0,
    
    [EnumMember()]
    [OptionSetMetadata("Microsoft Dataverse", Index=1, Lcid=1036, Color="#0000ff")]
    MicrosoftDataverse = 1,
}

[DataContract()]
public enum EnvironmentVariableDefinition_Type {
    
    [EnumMember()]
    [OptionSetMetadata("String", Index=0, Lcid=1036, Color="#0000ff")]
    String = 100000000,
    
    [EnumMember()]
    [OptionSetMetadata("Number", Index=1, Lcid=1036, Color="#0000ff")]
    Number = 100000001,
    
    [EnumMember()]
    [OptionSetMetadata("Boolean", Index=2, Lcid=1036, Color="#0000ff")]
    Boolean = 100000002,
    
    [EnumMember()]
    [OptionSetMetadata("JSON", Index=3, Lcid=1036, Color="#0000ff")]
    JSON = 100000003,
    
    [EnumMember()]
    [OptionSetMetadata("Data Source", Index=4, Lcid=1036, Color="#0000ff")]
    DataSource = 100000004,
    
    [EnumMember()]
    [OptionSetMetadata("Secret", Index=5, Lcid=1036, Color="#0000ff")]
    Secret = 100000005,
}

[DataContract()]
public enum EnvironmentVariableDefinition_statuscode {
    
    [EnumMember()]
    [OptionSetMetadata("Active", Index=0, Lcid=1036)]
    Active = 1,
    
    [EnumMember()]
    [OptionSetMetadata("Inactive", Index=1, Lcid=1036)]
    Inactive = 2,
}
