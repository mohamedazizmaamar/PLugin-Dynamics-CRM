//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using DG.XrmContext;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;




/// <summary>
/// <para>Pièce jointe MIME pour une activité.</para>
/// <para>Display Name: Pièce jointe</para>
/// </summary>
[EntityLogicalName("activitymimeattachment")]
[DebuggerDisplay("{DebuggerDisplay,nq}")]
[DataContract()]
public partial class ActivityMimeAttachment : ExtendedEntity<EmptyEnum, EmptyEnum> {
    
    public const string EntityLogicalName = "activitymimeattachment";
    
    public const int EntityTypeCode = 1001;
    
    public ActivityMimeAttachment() : 
            base(EntityLogicalName) {
    }
    
    public ActivityMimeAttachment(Guid Id) : 
            base(EntityLogicalName, Id) {
    }
    
    private string DebuggerDisplay {
        get {
            return GetDebuggerDisplay("filename");
        }
    }
    
    [AttributeLogicalName("activitymimeattachmentid")]
    public override Guid Id {
        get {
            return base.Id;
        }
        set {
            SetId("activitymimeattachmentid", value);
        }
    }
    
    /// <summary>
    /// <para>Identificateur unique de la pièce jointe.</para>
    /// <para>Display Name: Pièce jointe MIME de l'activité</para>
    /// </summary>
    [AttributeLogicalName("activitymimeattachmentid")]
    [DisplayName("Pièce jointe MIME de l\'activité")]
    public Guid? ActivityMimeAttachmentId {
        get {
            return GetAttributeValue<Guid?>("activitymimeattachmentid");
        }
        set {
            SetId("activitymimeattachmentid", value);
        }
    }
    
    /// <summary>
    /// <para>Identificateur unique de l'activité à laquelle la pièce jointe est associée.</para>
    /// <para>Display Name: Concernant</para>
    /// </summary>
    [AttributeLogicalName("activityid")]
    [DisplayName("Concernant")]
    public EntityReference ActivityId {
        get {
            return GetAttributeValue<EntityReference>("activityid");
        }
        set {
            SetAttributeValue("activityid", value);
        }
    }
    
    /// <summary>
    /// <para>Utilisation interne uniquement.</para>
    /// </summary>
    [AttributeLogicalName("activitymimeattachmentidunique")]
    public Guid? ActivityMimeAttachmentIdUnique {
        get {
            return GetAttributeValue<Guid?>("activitymimeattachmentidunique");
        }
        set {
            SetAttributeValue("activitymimeattachmentidunique", value);
        }
    }
    
    /// <summary>
    /// <para>Objet décrivant l'activité.</para>
    /// <para>Display Name: ActivitySubject</para>
    /// </summary>
    [AttributeLogicalName("activitysubject")]
    [DisplayName("ActivitySubject")]
    [MaxLength(2000)]
    public string ActivitySubject {
        get {
            return GetAttributeValue<string>("activitysubject");
        }
    }
    
    /// <summary>
    /// <para>lien anonyme</para>
    /// <para>Display Name: Utilisation interne uniquement.</para>
    /// </summary>
    [AttributeLogicalName("anonymouslink")]
    [DisplayName("Utilisation interne uniquement.")]
    [MaxLength(2000)]
    public string AnonymousLink {
        get {
            return GetAttributeValue<string>("anonymouslink");
        }
    }
    
    /// <summary>
    /// <para>Utilisation interne uniquement</para>
    /// <para>Display Name: ID de contenu</para>
    /// </summary>
    [AttributeLogicalName("attachmentcontentid")]
    [DisplayName("ID de contenu")]
    [MaxLength(250)]
    public string AttachmentContentId {
        get {
            return GetAttributeValue<string>("attachmentcontentid");
        }
        set {
            SetAttributeValue("attachmentcontentid", value);
        }
    }
    
    /// <summary>
    /// <para>Identificateur unique de la pièce jointe à laquelle la pièce jointe MIME de l’activité est associée.</para>
    /// <para>Display Name: Pièce jointe</para>
    /// </summary>
    [AttributeLogicalName("attachmentid")]
    [DisplayName("Pièce jointe")]
    public EntityReference AttachmentId {
        get {
            return GetAttributeValue<EntityReference>("attachmentid");
        }
        set {
            SetAttributeValue("attachmentid", value);
        }
    }
    
    /// <summary>
    /// <para>Numéro de la pièce jointe.</para>
    /// <para>Display Name: Numéro de la pièce jointe</para>
    /// </summary>
    [AttributeLogicalName("attachmentnumber")]
    [DisplayName("Numéro de la pièce jointe")]
    [Range(0, 1000000000)]
    public int? AttachmentNumber {
        get {
            return GetAttributeValue<int?>("attachmentnumber");
        }
        set {
            SetAttributeValue("attachmentnumber", value);
        }
    }
    
    /// <summary>
    /// <para>Contenu de la pièce jointe.</para>
    /// <para>Display Name: Corps</para>
    /// </summary>
    [AttributeLogicalName("body")]
    [DisplayName("Corps")]
    [MaxLength(1073741823)]
    public string Body {
        get {
            return GetAttributeValue<string>("body");
        }
        set {
            SetAttributeValue("body", value);
        }
    }
    
    /// <summary>
    /// <para>Utilisation interne uniquement.</para>
    /// <para>Display Name: État du composant</para>
    /// </summary>
    [AttributeLogicalName("componentstate")]
    [DisplayName("État du composant")]
    public componentstate? ComponentState {
        get {
            return GetOptionSetValue<componentstate>("componentstate");
        }
    }
    
    /// <summary>
    /// <para>Nom de fichier de la pièce jointe.</para>
    /// <para>Display Name: Nom de fichier</para>
    /// </summary>
    [AttributeLogicalName("filename")]
    [DisplayName("Nom de fichier")]
    [MaxLength(255)]
    public string FileName {
        get {
            return GetAttributeValue<string>("filename");
        }
        set {
            SetAttributeValue("filename", value);
        }
    }
    
    /// <summary>
    /// <para>Taille de fichier de la pièce jointe.</para>
    /// <para>Display Name: Taille de fichier (octets)</para>
    /// </summary>
    [AttributeLogicalName("filesize")]
    [DisplayName("Taille de fichier (octets)")]
    [Range(0, 1000000000)]
    public int? FileSize {
        get {
            return GetAttributeValue<int?>("filesize");
        }
    }
    
    /// <summary>
    /// <para>Indique si cette pièce jointe est suivie ou non.</para>
    /// <para>Display Name: Suivi(e)</para>
    /// </summary>
    [AttributeLogicalName("isfollowed")]
    [DisplayName("Suivi(e)")]
    public bool? IsFollowed {
        get {
            return GetAttributeValue<bool?>("isfollowed");
        }
    }
    
    /// <summary>
    /// <para>Indique si le composant de solution fait partie d’une solution gérée.</para>
    /// <para>Display Name: Est géré</para>
    /// </summary>
    [AttributeLogicalName("ismanaged")]
    [DisplayName("Est géré")]
    public bool? IsManaged {
        get {
            return GetAttributeValue<bool?>("ismanaged");
        }
    }
    
    /// <summary>
    /// <para>Type MIME de la pièce jointe.</para>
    /// <para>Display Name: Type MIME</para>
    /// </summary>
    [AttributeLogicalName("mimetype")]
    [DisplayName("Type MIME")]
    [MaxLength(256)]
    public string MimeType {
        get {
            return GetAttributeValue<string>("mimetype");
        }
        set {
            SetAttributeValue("mimetype", value);
        }
    }
    
    /// <summary>
    /// <para>Identificateur unique de l’enregistrement auquel la pièce jointe est associée</para>
    /// <para>Display Name: Élément</para>
    /// </summary>
    [AttributeLogicalName("objectid")]
    [DisplayName("Élément")]
    public EntityReference ObjectId {
        get {
            return GetAttributeValue<EntityReference>("objectid");
        }
        set {
            SetAttributeValue("objectid", value);
        }
    }
    
    /// <summary>
    /// <para>Code de type d’objet de l’entité associée à la pièce jointe.</para>
    /// <para>Display Name: Entité</para>
    /// </summary>
    [AttributeLogicalName("objecttypecode")]
    [DisplayName("Entité")]
    public string ObjectTypeCode {
        get {
            return GetAttributeValue<string>("objecttypecode");
        }
        set {
            SetAttributeValue("objecttypecode", value);
        }
    }
    
    /// <summary>
    /// <para>Utilisation interne uniquement.</para>
    /// <para>Display Name: Heure de remplacement de l’enregistrement</para>
    /// </summary>
    [AttributeLogicalName("overwritetime")]
    [DisplayName("Heure de remplacement de l’enregistrement")]
    public DateTime? OverwriteTime {
        get {
            return GetAttributeValue<DateTime?>("overwritetime");
        }
    }
    
    /// <summary>
    /// <para>Identificateur unique de l’utilisateur ou de l’équipe propriétaire de la pièce jointe MIME de l’activité.</para>
    /// <para>Display Name: Propriétaire</para>
    /// </summary>
    [AttributeLogicalName("ownerid")]
    [DisplayName("Propriétaire")]
    public EntityReference OwnerId {
        get {
            return GetAttributeValue<EntityReference>("ownerid");
        }
    }
    
    /// <summary>
    /// <para>Identificateur unique de la division de la pièce jointe MIME de l’activité.</para>
    /// <para>Display Name: Division propriétaire</para>
    /// </summary>
    [AttributeLogicalName("owningbusinessunit")]
    [DisplayName("Division propriétaire")]
    public EntityReference OwningBusinessUnit {
        get {
            return GetAttributeValue<EntityReference>("owningbusinessunit");
        }
    }
    
    /// <summary>
    /// <para>Identificateur unique de l’utilisateur propriétaire de la pièce jointe MIME de l’activité.</para>
    /// <para>Display Name: Propriétaire</para>
    /// </summary>
    [AttributeLogicalName("owninguser")]
    [DisplayName("Propriétaire")]
    public EntityReference OwningUser {
        get {
            return GetAttributeValue<EntityReference>("owninguser");
        }
    }
    
    /// <summary>
    /// <para>Nom de fichier de la pièce jointe.</para>
    /// <para>Display Name: Nom de fichier</para>
    /// </summary>
    [AttributeLogicalName("filename")]
    [DisplayName("Nom de fichier")]
    [MaxLength(255)]
    public string PrimaryNameField {
        get {
            return GetAttributeValue<string>("filename");
        }
        set {
            SetAttributeValue("filename", value);
        }
    }
    
    /// <summary>
    /// <para>Identificateur unique de la solution associée.</para>
    /// <para>Display Name: Solution</para>
    /// </summary>
    [AttributeLogicalName("solutionid")]
    [DisplayName("Solution")]
    public Guid? SolutionId {
        get {
            return GetAttributeValue<Guid?>("solutionid");
        }
    }
    
    /// <summary>
    /// <para>Objet décrivant la pièce jointe.</para>
    /// <para>Display Name: Sujet</para>
    /// </summary>
    [AttributeLogicalName("subject")]
    [DisplayName("Sujet")]
    [MaxLength(2000)]
    public string Subject {
        get {
            return GetAttributeValue<string>("subject");
        }
        set {
            SetAttributeValue("subject", value);
        }
    }
    
    /// <summary>
    /// <para>Numéro de version de la pièce jointe MIME de l’activité.</para>
    /// <para>Display Name: Numéro de version</para>
    /// </summary>
    [AttributeLogicalName("versionnumber")]
    [DisplayName("Numéro de version")]
    public long? VersionNumber {
        get {
            return GetAttributeValue<long?>("versionnumber");
        }
    }
    
    /// <summary>
    /// <para>Display Name: msft_DataState</para>
    /// </summary>
    [AttributeLogicalName("msft_datastate")]
    [DisplayName("msft_DataState")]
    public msft_datastate? msft_DataState {
        get {
            return GetOptionSetValue<msft_datastate>("msft_datastate");
        }
    }
    
    [AttributeLogicalName("objectid")]
    [RelationshipSchemaName("email_activity_mime_attachment")]
    public Email email_activity_mime_attachment {
        get {
            return GetRelatedEntity<Email>("email_activity_mime_attachment", null);
        }
        set {
            SetRelatedEntity("email_activity_mime_attachment", null, value);
        }
    }
    
    public static ActivityMimeAttachment Retrieve(IOrganizationService service, Guid id, params Expression<Func<ActivityMimeAttachment,object>>[] attrs) {
        return service.Retrieve(id, attrs);
    }
}

[DataContract()]
public enum ActivityMimeAttachment_ObjectTypeCode {
    
    [EnumMember()]
    [OptionSetMetadata("Modèle de courrier électronique", Index=0, Lcid=1036)]
    Modèledecourrierélectronique = 2010,
    
    [EnumMember()]
    [OptionSetMetadata("Activité de courrier électronique", Index=1, Lcid=1036)]
    Activitédecourrierélectronique = 4200,
}
